{"version":3,"file":"index--N4flfum.js","sources":["../../src/services/UIManager.ts","../../src/main.ts"],"sourcesContent":["/**\n * UIManager class\n * Handles the game's user interface and state management\n */\n\nimport { EventEmitter } from '../utils/EventEmitter';\nimport { ViewType, Exercise, DrawingData, ScoreResult, ConstraintBoxSize } from '../types/Exercise';\n\n/**\n * Game UI state\n */\ninterface GameState {\n  currentView: ViewType;\n  currentAttempt: number;\n  isTransitioning: boolean;\n  isLoading: boolean;\n  hasError: boolean;\n  errorMessage: string;\n}\n\n/**\n * UI configuration for responsive layout\n */\ninterface UIConfiguration {\n  isMobile: boolean;\n  isLandscape: boolean;\n  viewportWidth: number;\n  viewportHeight: number;\n  pixelRatio: number;\n  historyHeight: number;\n  constraintBoxSize: ConstraintBoxSize;\n}\n\n/**\n * Animation state\n */\ninterface AnimationState {\n  exampleAnimationInProgress: boolean;\n  attemptAnimationInProgress: boolean;\n  scoreAnimationInProgress: boolean;\n}\n\n/**\n * View components container\n */\ninterface ViewComponents {\n  container: HTMLElement | null;\n  views: Map<ViewType, HTMLElement>;\n  drawingCanvas: HTMLCanvasElement | null;\n  constraintBox: HTMLElement | null;\n  historyDisplay: HTMLElement | null;\n  buttons: Map<string, HTMLButtonElement>;\n}\n\nexport class UIManager extends EventEmitter {\n  // State\n  private state: GameState = {\n    currentView: 'welcome',\n    currentAttempt: 0,\n    isTransitioning: false,\n    isLoading: false,\n    hasError: false,\n    errorMessage: '',\n  };\n\n  // Configuration\n  private config: UIConfiguration = {\n    isMobile: false,\n    isLandscape: false,\n    viewportWidth: 0,\n    viewportHeight: 0,\n    pixelRatio: 1,\n    historyHeight: 120,\n    constraintBoxSize: { width: 300, height: 300 },\n  };\n\n  // Animation state\n  private animation: AnimationState = {\n    exampleAnimationInProgress: false,\n    attemptAnimationInProgress: false,\n    scoreAnimationInProgress: false,\n  };\n\n  // UI Components\n  private components: ViewComponents = {\n    container: null,\n    views: new Map(),\n    drawingCanvas: null,\n    constraintBox: null,\n    historyDisplay: null,\n    buttons: new Map(),\n  };\n\n  // History of drawing attempts\n  private historyItems: HTMLElement[] = [];\n\n  /**\n   * Initialize the UI manager\n   * @param container - Container element for the game\n   */\n  public initialize(container: HTMLElement): void {\n    console.log('UIManager: initialize - starting');\n    this.components.container = container;\n\n    // Create view elements\n    console.log('UIManager: initialize - creating view elements');\n    this.createViewElements();\n    console.log('UIManager: initialize - created views:', Array.from(this.components.views.keys()));\n\n    // Set up event listeners\n    this.setupEventListeners();\n\n    // Configure for current device\n    this.updateConfiguration();\n\n    // Reset currentView so that showView('welcome') will always execute\n    (this.state as GameState).currentView = 'welcome' as ViewType;\n    this.showView('welcome');\n    console.log('UIManager: initialize - forcibly hiding exercise-list view');\n    const listView = this.components.views.get('exercise-list');\n    if (listView) {\n      listView.style.display = 'none';\n      listView.classList.remove('active');\n    }\n\n    // Emit initialized event\n    this.emit('ui-initialized');\n  }\n\n  /**\n   * Create view elements for each game view\n   */\n  private createViewElements(): void {\n    console.log('UIManager: createViewElements - started');\n    if (!this.components.container) return;\n\n    // Clear container\n    this.components.container.innerHTML = '';\n\n    // Create views\n    console.log('UIManager: createViewElements - creating welcome view');\n    this.createWelcomeView();\n    console.log('UIManager: createViewElements - creating attempt view');\n    this.createAttemptView();\n    console.log('UIManager: createViewElements - creating create-exercise view');\n    this.createCreateExerciseView();\n    console.log('UIManager: createViewElements - creating score view');\n    this.createScoreView();\n    console.log('UIManager: createViewElements - creating exercise-list view');\n    this.createExerciseListView();\n\n    // Append views to container\n    this.components.views.forEach(view => {\n      this.components.container?.appendChild(view);\n    });\n    console.log('UIManager: createViewElements - appended all views');\n  }\n\n  /**\n   * Create welcome view\n   */\n  private createWelcomeView(): void {\n    const view = document.createElement('div');\n    view.className = 'view welcome-view';\n    view.innerHTML = `\n      <div class=\"welcome-content\">\n        <h1>Handwriting Exercise</h1>\n        <p>Practice your handwriting skills</p>\n        <div class=\"button-container\">\n          <button class=\"btn btn-primary\" id=\"btn-create-template\">Create New Template</button>\n          <button class=\"btn btn-secondary\" id=\"btn-load-template\">Load Saved Template</button>\n        </div>\n      </div>\n    `;\n\n    this.components.views.set('welcome', view);\n\n    // Add button references\n    const createButton = view.querySelector('#btn-create-template') as HTMLButtonElement;\n    const loadButton = view.querySelector('#btn-load-template') as HTMLButtonElement;\n\n    if (createButton) {\n      this.components.buttons.set('create-template', createButton);\n      createButton.addEventListener('click', () => {\n        this.emit('create-template-clicked');\n      });\n    }\n\n    if (loadButton) {\n      this.components.buttons.set('load-template', loadButton);\n      loadButton.addEventListener('click', () => {\n        this.emit('load-template-clicked');\n      });\n    }\n  }\n\n  /**\n   * Create attempt view for drawing practice\n   */\n  private createAttemptView(): void {\n    const view = document.createElement('div');\n    view.className = 'view attempt-view';\n    view.innerHTML = `\n      <div class=\"history-display\"></div>\n      <div class=\"drawing-area\">\n        <div class=\"example-display\">\n          <div class=\"example-container\"></div>\n        </div>\n        <div class=\"constraint-box\"></div>\n        <canvas class=\"drawing-canvas\"></canvas>\n      </div>\n      <div class=\"controls\">\n        <button class=\"btn btn-done\" id=\"btn-done\">Done</button>\n      </div>\n      <div class=\"attempt-info\">\n        <div class=\"attempt-counter\">Attempt <span id=\"current-attempt\">1</span>/5</div>\n      </div>\n    `;\n\n    this.components.views.set('attempt', view);\n\n    // Store references to important elements\n    this.components.historyDisplay = view.querySelector('.history-display');\n    this.components.drawingCanvas = view.querySelector('.drawing-canvas');\n    this.components.constraintBox = view.querySelector('.constraint-box');\n\n    // Add button references\n    const doneButton = view.querySelector('#btn-done') as HTMLButtonElement;\n    if (doneButton) {\n      this.components.buttons.set('done', doneButton);\n      doneButton.addEventListener('click', () => {\n        this.emit('done-button-clicked');\n      });\n    }\n  }\n\n  /**\n   * Create exercise creation view\n   */\n  private createCreateExerciseView(): void {\n    const view = document.createElement('div');\n    view.className = 'view create-exercise-view';\n    view.innerHTML = `\n      <div class=\"create-exercise-content\">\n        <h2>Create New Exercise</h2>\n        <p>Draw an example for the child to practice</p>\n        <div class=\"drawing-container\">\n          <canvas class=\"drawing-canvas\"></canvas>\n        </div>\n        <div class=\"exercise-form\">\n          <div class=\"form-group\">\n            <label for=\"exercise-name\">Exercise Name:</label>\n            <input type=\"text\" id=\"exercise-name\" placeholder=\"Enter a name for this exercise\">\n          </div>\n        </div>\n        <div class=\"controls\">\n          <button class=\"btn btn-secondary\" id=\"btn-cancel-exercise\">Cancel</button>\n          <button class=\"btn btn-primary\" id=\"btn-save-exercise\">Save Exercise</button>\n        </div>\n      </div>\n    `;\n\n    this.components.views.set('create-exercise', view);\n\n    // Add button references\n    const cancelButton = view.querySelector('#btn-cancel-exercise') as HTMLButtonElement;\n    const saveButton = view.querySelector('#btn-save-exercise') as HTMLButtonElement;\n\n    if (cancelButton) {\n      this.components.buttons.set('cancel-exercise', cancelButton);\n      cancelButton.addEventListener('click', () => {\n        this.emit('cancel-exercise-clicked');\n      });\n    }\n\n    if (saveButton) {\n      this.components.buttons.set('save-exercise', saveButton);\n      saveButton.addEventListener('click', () => {\n        const nameInput = view.querySelector('#exercise-name') as HTMLInputElement;\n        const name = nameInput?.value.trim() || 'Untitled Exercise';\n        this.emit('save-exercise-clicked', { name });\n      });\n    }\n  }\n\n  /**\n   * Create score view\n   */\n  private createScoreView(): void {\n    const view = document.createElement('div');\n    view.className = 'view score-view';\n    view.innerHTML = `\n      <div class=\"score-content\">\n        <h2>Great Job!</h2>\n        <div class=\"score-display\">\n          <div class=\"total-score\">\n            <span class=\"score-number\">0</span>/100\n          </div>\n          <div class=\"feedback-message\">\n            Well done! Keep practicing!\n          </div>\n          <div class=\"star-ratings\">\n            <div class=\"rating-category\">\n              <div class=\"category-name\">Accuracy</div>\n              <div class=\"stars accuracy-stars\"></div>\n            </div>\n            <div class=\"rating-category\">\n              <div class=\"category-name\">Strokes</div>\n              <div class=\"stars strokes-stars\"></div>\n            </div>\n            <div class=\"rating-category\">\n              <div class=\"category-name\">Timing</div>\n              <div class=\"stars timing-stars\"></div>\n            </div>\n            <div class=\"rating-category\">\n              <div class=\"category-name\">Overall</div>\n              <div class=\"stars overall-stars\"></div>\n            </div>\n          </div>\n        </div>\n        <div class=\"controls\">\n          <button class=\"btn btn-secondary\" id=\"btn-try-again\">Try Again</button>\n          <button class=\"btn btn-primary\" id=\"btn-back-to-menu\">Back to Menu</button>\n        </div>\n      </div>\n    `;\n\n    this.components.views.set('score', view);\n\n    // Add button references\n    const tryAgainButton = view.querySelector('#btn-try-again') as HTMLButtonElement;\n    const menuButton = view.querySelector('#btn-back-to-menu') as HTMLButtonElement;\n\n    if (tryAgainButton) {\n      this.components.buttons.set('try-again', tryAgainButton);\n      tryAgainButton.addEventListener('click', () => {\n        this.emit('try-again-clicked');\n      });\n    }\n\n    if (menuButton) {\n      this.components.buttons.set('back-to-menu', menuButton);\n      menuButton.addEventListener('click', () => {\n        this.emit('back-to-menu-clicked');\n      });\n    }\n  }\n\n  /**\n   * Create exercise list view\n   */\n  private createExerciseListView(): void {\n    const view = document.createElement('div');\n    view.className = 'view exercise-list-view';\n    view.style.display = 'none';\n    view.innerHTML = `\n      <div class=\"exercise-list-content\">\n        <h2>Load Saved Template</h2>\n        <div class=\"exercise-list\">\n          <!-- Exercise items will be inserted dynamically -->\n        </div>\n        <div class=\"controls\">\n          <button class=\"btn btn-secondary\" id=\"btn-back\">Back</button>\n        </div>\n      </div>\n    `;\n\n    this.components.views.set('exercise-list', view);\n\n    // Add button references\n    const backButton = view.querySelector('#btn-back') as HTMLButtonElement;\n\n    if (backButton) {\n      this.components.buttons.set('back', backButton);\n      backButton.addEventListener('click', () => {\n        this.emit('back-clicked');\n      });\n    }\n  }\n\n  /**\n   * Set up event listeners\n   */\n  private setupEventListeners(): void {\n    // Window resize\n    window.addEventListener('resize', this.handleResize.bind(this));\n\n    // Device orientation change\n    window.addEventListener('orientationchange', this.handleOrientationChange.bind(this));\n  }\n\n  /**\n   * Handle window resize\n   */\n  private handleResize(): void {\n    this.updateConfiguration();\n    this.updateLayout();\n  }\n\n  /**\n   * Handle orientation change\n   */\n  private handleOrientationChange(): void {\n    setTimeout(() => {\n      this.updateConfiguration();\n      this.updateLayout();\n    }, 300); // Slight delay to ensure dimensions are updated\n  }\n\n  /**\n   * Update configuration based on current window/device\n   */\n  private updateConfiguration(): void {\n    const width = window.innerWidth;\n    const height = window.innerHeight;\n\n    this.config.viewportWidth = width;\n    this.config.viewportHeight = height;\n    this.config.isLandscape = width > height;\n    this.config.isMobile = width < 768;\n    this.config.pixelRatio = window.devicePixelRatio || 1;\n    this.config.historyHeight = this.config.isMobile ? 100 : 120;\n\n    // Update constraint box size based on viewport\n    const minDimension = Math.min(width, height);\n    const baseSize = minDimension * 0.6; // 60% of smaller dimension\n\n    this.config.constraintBoxSize = {\n      width: baseSize,\n      height: baseSize,\n    };\n  }\n\n  /**\n   * Update layout based on current configuration\n   */\n  private updateLayout(): void {\n    // Update drawing canvas dimensions\n    this.updateCanvasDimensions();\n\n    // Update constraint box size\n    this.updateConstraintBoxSize();\n\n    // Update history display\n    this.updateHistoryDisplay();\n  }\n\n  /**\n   * Update canvas dimensions to match device pixel ratio\n   */\n  private updateCanvasDimensions(): void {\n    if (!this.components.drawingCanvas) return;\n\n    const canvas = this.components.drawingCanvas;\n    const container = canvas.parentElement;\n\n    if (!container) return;\n\n    // Get container dimensions\n    const rect = container.getBoundingClientRect();\n\n    // Set canvas dimensions with pixel ratio adjustment\n    canvas.width = rect.width * this.config.pixelRatio;\n    canvas.height = rect.height * this.config.pixelRatio;\n\n    // Set display size\n    canvas.style.width = `${rect.width}px`;\n    canvas.style.height = `${rect.height}px`;\n  }\n\n  /**\n   * Update constraint box size based on current attempt\n   */\n  private updateConstraintBoxSize(): void {\n    if (!this.components.constraintBox) return;\n\n    const box = this.components.constraintBox;\n\n    // Set size based on configuration and current attempt\n    const size = this.calculateConstraintBoxSize(this.state.currentAttempt);\n\n    box.style.width = `${size.width}px`;\n    box.style.height = `${size.height}px`;\n\n    // Center the box in the drawing area\n    const drawingArea = box.parentElement;\n    if (drawingArea) {\n      const areaRect = drawingArea.getBoundingClientRect();\n      box.style.left = `${(areaRect.width - size.width) / 2}px`;\n      box.style.top = `${(areaRect.height - size.height) / 2}px`;\n    }\n  }\n\n  /**\n   * Update history display area\n   */\n  private updateHistoryDisplay(): void {\n    if (!this.components.historyDisplay) return;\n\n    // Set height based on configuration\n    this.components.historyDisplay.style.height = `${this.config.historyHeight}px`;\n  }\n\n  /**\n   * Show a specific view\n   * @param viewType - Type of view to show\n   */\n  public showView(viewType: ViewType): void {\n    console.log(`UIManager: showView called with viewType='${viewType}'`);\n    // Don't change views during transition\n    if (this.state.isTransitioning) return;\n\n    // Get view element\n    const view = this.components.views.get(viewType);\n\n    if (!view) {\n      console.error(`View not found: ${viewType}`);\n      return;\n    }\n\n    // If it's already the current view, do nothing\n    if (this.state.currentView === viewType) return;\n\n    // Hide all views\n    this.components.views.forEach((v, type) => {\n      if (type !== viewType) {\n        v.style.display = 'none';\n        v.classList.remove('active');\n      }\n    });\n\n    // Show the selected view\n    view.style.display = 'flex';\n\n    // Trigger reflow to ensure transitions work\n    void view.offsetWidth;\n\n    // Add active class for transitions\n    view.classList.add('active');\n\n    // Update state\n    this.state.currentView = viewType;\n\n    // If showing attempt view, update attempt counter\n    if (viewType === 'attempt') {\n      const attemptCounter = document.getElementById('current-attempt');\n      if (attemptCounter) {\n        attemptCounter.textContent = this.state.currentAttempt.toString();\n      }\n    }\n\n    // Emit view changed event\n    this.emit('view-changed', viewType);\n  }\n\n  /**\n   * Transition to a view with animation\n   * @param viewType - Type of view to transition to\n   */\n  public transitionToView(viewType: ViewType): void {\n    if (this.state.isTransitioning) return;\n\n    this.state.isTransitioning = true;\n\n    // Get current and next view elements\n    const currentView = this.components.views.get(this.state.currentView);\n    const nextView = this.components.views.get(viewType);\n\n    if (!currentView || !nextView) {\n      console.error('Cannot transition: view not found');\n      this.state.isTransitioning = false;\n      return;\n    }\n\n    // Prepare next view\n    nextView.style.display = 'flex';\n    nextView.style.opacity = '0';\n    nextView.style.transform = 'translateY(20px)';\n\n    // Trigger reflow\n    void nextView.offsetWidth;\n\n    // Animate current view out\n    currentView.style.opacity = '0';\n    currentView.style.transform = 'translateY(-20px)';\n\n    // Animate next view in\n    nextView.style.opacity = '1';\n    nextView.style.transform = 'translateY(0)';\n\n    // After animation completes\n    setTimeout(() => {\n      // Hide current view\n      currentView.style.display = 'none';\n      currentView.classList.remove('active');\n\n      // Reset transforms\n      currentView.style.transform = '';\n      currentView.style.opacity = '';\n\n      // Mark next view as active\n      nextView.classList.add('active');\n\n      // Update state\n      this.state.currentView = viewType;\n      this.state.isTransitioning = false;\n\n      // If showing attempt view, update attempt counter\n      if (viewType === 'attempt') {\n        const attemptCounter = document.getElementById('current-attempt');\n        if (attemptCounter) {\n          attemptCounter.textContent = this.state.currentAttempt.toString();\n        }\n      }\n\n      // Emit view changed event\n      this.emit('view-changed', viewType);\n    }, 500); // Match the CSS transition duration\n  }\n\n  /**\n   * Set up attempt view for current attempt\n   * @param attemptNumber - Current attempt number (1-5)\n   * @param boxSize - Size of constraint box\n   */\n  public setupAttemptView(attemptNumber: number, boxSize: ConstraintBoxSize): void {\n    // Update state\n    this.state.currentAttempt = attemptNumber;\n\n    // Update constraint box size\n    this.config.constraintBoxSize = boxSize;\n    this.updateConstraintBoxSize();\n\n    // Update attempt counter\n    const attemptCounter = document.getElementById('current-attempt');\n    if (attemptCounter) {\n      attemptCounter.textContent = attemptNumber.toString();\n    }\n\n    // Update canvas dimensions\n    this.updateCanvasDimensions();\n  }\n\n  /**\n   * Show example drawing with animation\n   * @param drawing - Drawing data to display\n   */\n  public showExampleDrawing(drawing: DrawingData): void {\n    if (this.animation.exampleAnimationInProgress) return;\n\n    this.animation.exampleAnimationInProgress = true;\n\n    // Create a canvas for the example\n    const exampleContainer = document.querySelector('.example-container');\n    if (!exampleContainer) return;\n\n    // Clear any existing content\n    exampleContainer.innerHTML = '';\n\n    // Create canvas\n    const canvas = document.createElement('canvas');\n    canvas.className = 'example-canvas';\n    exampleContainer.appendChild(canvas);\n\n    // Set canvas dimensions\n    const rect = exampleContainer.getBoundingClientRect();\n    canvas.width = rect.width * this.config.pixelRatio;\n    canvas.height = rect.height * this.config.pixelRatio;\n    canvas.style.width = `${rect.width}px`;\n    canvas.style.height = `${rect.height}px`;\n\n    // Get context\n    const context = canvas.getContext('2d');\n    if (!context) return;\n\n    // Apply device pixel ratio scale\n    context.scale(this.config.pixelRatio, this.config.pixelRatio);\n\n    // Function to render drawing to canvas\n    const renderDrawing = (): void => {\n      // Clear canvas\n      context.clearRect(0, 0, canvas.width, canvas.height);\n\n      // Find bounding box of drawing\n      let minX = Number.MAX_VALUE;\n      let maxX = Number.MIN_VALUE;\n      let minY = Number.MAX_VALUE;\n      let maxY = Number.MIN_VALUE;\n\n      for (const stroke of drawing.strokes) {\n        for (const point of stroke.points) {\n          minX = Math.min(minX, point.x);\n          maxX = Math.max(maxX, point.x);\n          minY = Math.min(minY, point.y);\n          maxY = Math.max(maxY, point.y);\n        }\n      }\n\n      // Calculate scale to fit in canvas\n      const originalWidth = maxX - minX;\n      const originalHeight = maxY - minY;\n\n      if (originalWidth === 0 || originalHeight === 0) return;\n\n      const canvasWidth = rect.width;\n      const canvasHeight = rect.height;\n\n      const scale = Math.min(\n        (canvasWidth / originalWidth) * 0.8,\n        (canvasHeight / originalHeight) * 0.8\n      );\n\n      // Calculate centering offset\n      const offsetX = (canvasWidth - originalWidth * scale) / 2;\n      const offsetY = (canvasHeight - originalHeight * scale) / 2;\n\n      // Draw each stroke\n      for (const stroke of drawing.strokes) {\n        if (stroke.points.length < 2) continue;\n\n        context.beginPath();\n        context.strokeStyle = stroke.color;\n        context.lineWidth = stroke.width * scale * 0.5;\n        context.lineCap = 'round';\n        context.lineJoin = 'round';\n\n        // First point\n        const firstPoint = stroke.points[0];\n        const scaledX1 = offsetX + (firstPoint.x - minX) * scale;\n        const scaledY1 = offsetY + (firstPoint.y - minY) * scale;\n        context.moveTo(scaledX1, scaledY1);\n\n        // Rest of the points\n        for (let i = 1; i < stroke.points.length; i++) {\n          const point = stroke.points[i];\n          const scaledX = offsetX + (point.x - minX) * scale;\n          const scaledY = offsetY + (point.y - minY) * scale;\n          context.lineTo(scaledX, scaledY);\n        }\n\n        context.stroke();\n      }\n    };\n\n    // Initial render\n    renderDrawing();\n\n    // Animate to top-left corner\n    setTimeout(() => {\n      // Add animation class\n      canvas.classList.add('animate-to-corner');\n\n      // Set the destination position\n      canvas.style.transform = 'scale(0.3) translate(-100%, -100%)';\n      canvas.style.transformOrigin = 'top left';\n\n      // Update after animation completes\n      setTimeout(() => {\n        // Move to history display\n        if (this.components.historyDisplay) {\n          const exampleItem = document.createElement('div');\n          exampleItem.className = 'history-item example-item';\n\n          // Clone the canvas\n          const clonedCanvas = canvas.cloneNode(true) as HTMLCanvasElement;\n          exampleItem.appendChild(clonedCanvas);\n\n          // Add label\n          const label = document.createElement('div');\n          label.className = 'history-label';\n          label.textContent = 'Example';\n          exampleItem.appendChild(label);\n\n          // Add to history display\n          this.components.historyDisplay.appendChild(exampleItem);\n        }\n\n        // Complete animation\n        this.animation.exampleAnimationInProgress = false;\n        this.emit('example-animation-complete');\n      }, 1000); // Animation duration\n    }, 2000); // Delay before starting animation\n  }\n\n  /**\n   * Animate drawing to history and shrink it\n   * @param attemptNumber - Attempt number\n   */\n  public animateDrawingToHistory(attemptNumber: number): void {\n    if (this.animation.attemptAnimationInProgress) return;\n\n    this.animation.attemptAnimationInProgress = true;\n\n    // Take a snapshot of the current canvas\n    if (!this.components.drawingCanvas) {\n      this.animation.attemptAnimationInProgress = false;\n      return;\n    }\n\n    // Create a clone of the canvas\n    const originalCanvas = this.components.drawingCanvas;\n    const tempCanvas = document.createElement('canvas');\n    tempCanvas.width = originalCanvas.width;\n    tempCanvas.height = originalCanvas.height;\n    tempCanvas.style.width = originalCanvas.style.width;\n    tempCanvas.style.height = originalCanvas.style.height;\n    tempCanvas.style.position = 'absolute';\n    tempCanvas.style.top = '0';\n    tempCanvas.style.left = '0';\n    tempCanvas.style.zIndex = '10';\n\n    // Get context and copy content\n    const tempContext = tempCanvas.getContext('2d');\n    if (!tempContext) {\n      this.animation.attemptAnimationInProgress = false;\n      return;\n    }\n\n    tempContext.drawImage(originalCanvas, 0, 0);\n\n    // Get drawing area\n    const drawingArea = originalCanvas.parentElement;\n    if (!drawingArea) {\n      this.animation.attemptAnimationInProgress = false;\n      return;\n    }\n\n    // Add canvas to drawing area\n    drawingArea.appendChild(tempCanvas);\n\n    // Animate to history\n    setTimeout(() => {\n      // Add animation class\n      tempCanvas.classList.add('animate-to-history');\n\n      // Get history display dimensions and position\n      if (!this.components.historyDisplay) {\n        drawingArea.removeChild(tempCanvas);\n        this.animation.attemptAnimationInProgress = false;\n        return;\n      }\n\n      const historyRect = this.components.historyDisplay.getBoundingClientRect();\n      const drawingRect = drawingArea.getBoundingClientRect();\n\n      // Calculate target size (small thumbnail)\n      const targetWidth = historyRect.height * 0.8;\n      const targetHeight = historyRect.height * 0.8;\n\n      // Calculate scale factor\n      const scaleX = targetWidth / drawingRect.width;\n      const scaleY = targetHeight / drawingRect.height;\n      const scale = Math.min(scaleX, scaleY);\n\n      // Calculate target position\n      const targetX = historyRect.width - targetWidth * this.historyItems.length - targetWidth - 10;\n      const targetY = 0;\n\n      // Apply animation\n      tempCanvas.style.transition = 'transform 0.8s ease-in-out';\n      tempCanvas.style.transformOrigin = 'top left';\n      tempCanvas.style.transform = `translate(${targetX}px, ${targetY}px) scale(${scale})`;\n\n      // After animation completes\n      setTimeout(() => {\n        // Create history item\n        const historyItem = document.createElement('div');\n        historyItem.className = 'history-item attempt-item';\n\n        // Create smaller canvas for history\n        const historyCanvas = document.createElement('canvas');\n        historyCanvas.width = targetWidth * this.config.pixelRatio;\n        historyCanvas.height = targetHeight * this.config.pixelRatio;\n        historyCanvas.style.width = `${targetWidth}px`;\n        historyCanvas.style.height = `${targetHeight}px`;\n\n        // Draw the attempt on the history canvas\n        const historyContext = historyCanvas.getContext('2d');\n        if (historyContext) {\n          // Scale for device pixel ratio\n          historyContext.scale(this.config.pixelRatio, this.config.pixelRatio);\n\n          // Scale to fit\n          const sourceWidth = originalCanvas.width / this.config.pixelRatio;\n          const sourceHeight = originalCanvas.height / this.config.pixelRatio;\n\n          historyContext.drawImage(\n            originalCanvas,\n            0,\n            0,\n            sourceWidth,\n            sourceHeight,\n            0,\n            0,\n            targetWidth,\n            targetHeight\n          );\n        }\n\n        // Add to history item\n        historyItem.appendChild(historyCanvas);\n\n        // Add attempt number label\n        const label = document.createElement('div');\n        label.className = 'history-label';\n        label.textContent = `Attempt ${attemptNumber}`;\n        historyItem.appendChild(label);\n\n        // Add to history display\n        if (this.components.historyDisplay) {\n          this.components.historyDisplay.appendChild(historyItem);\n          this.historyItems.push(historyItem);\n        }\n\n        // Remove temporary canvas\n        drawingArea.removeChild(tempCanvas);\n\n        // Clear original canvas\n        const originalContext = originalCanvas.getContext('2d');\n        if (originalContext) {\n          originalContext.clearRect(0, 0, originalCanvas.width, originalCanvas.height);\n        }\n\n        // Complete animation\n        this.animation.attemptAnimationInProgress = false;\n        this.emit('attempt-animation-complete', attemptNumber);\n      }, 1000); // Animation duration\n    }, 100); // Short delay before starting animation\n  }\n\n  /**\n   * Display score results\n   * @param score - Score result to display\n   */\n  public showScoreScreen(score: ScoreResult): void {\n    // Switch to score view\n    this.showView('score');\n\n    // Update score display elements\n    const scoreView = this.components.views.get('score');\n    if (!scoreView) return;\n\n    // Update total score\n    const scoreNumber = scoreView.querySelector('.score-number');\n    if (scoreNumber) {\n      scoreNumber.textContent = score.totalScore.toString();\n    }\n\n    // Update feedback message\n    const feedbackMessage = scoreView.querySelector('.feedback-message');\n    if (feedbackMessage) {\n      feedbackMessage.textContent = score.feedback;\n    }\n\n    // Clear existing stars\n    const starContainers = scoreView.querySelectorAll('.stars');\n    starContainers.forEach(container => {\n      container.innerHTML = '';\n    });\n\n    // Animate stars with a delay between categories\n    setTimeout(() => {\n      this.displayStars('.accuracy-stars', score.categories.accuracy);\n\n      setTimeout(() => {\n        this.displayStars('.strokes-stars', score.categories.strokes);\n\n        setTimeout(() => {\n          this.displayStars('.timing-stars', score.categories.timing);\n\n          setTimeout(() => {\n            this.displayStars('.overall-stars', score.categories.overall);\n          }, 300);\n        }, 300);\n      }, 300);\n    }, 500);\n  }\n  /**\n   * Handle exercise selection from the list\n   * @param exercise - Selected exercise\n   */\n  private handleExerciseSelection(exercise: Exercise): void {\n    // Emit event for exercise selection\n    this.emit('exercise-selected', exercise);\n  }\n\n  /**\n   * Clean up any ongoing animations\n   */\n  public cleanupAnimations(): void {\n    // Reset animation flags\n    this.animation.exampleAnimationInProgress = false;\n    this.animation.attemptAnimationInProgress = false;\n    this.animation.scoreAnimationInProgress = false;\n\n    // Remove any temporary animation elements\n    if (this.components.container) {\n      const tempElements = this.components.container.querySelectorAll(\n        '.animate-to-corner, .animate-to-history'\n      );\n      tempElements.forEach(element => {\n        if (element.parentElement) {\n          element.parentElement.removeChild(element);\n        }\n      });\n    }\n  }\n\n  /**\n   * Reset the history display\n   */\n  public resetHistoryDisplay(): void {\n    if (!this.components.historyDisplay) return;\n\n    // Clear the history display\n    this.components.historyDisplay.innerHTML = '';\n\n    // Reset history items array\n    this.historyItems = [];\n  }\n\n  /**\n   * Update the attempt counter\n   * @param attemptNumber - Current attempt number\n   */\n  public updateAttemptCounter(attemptNumber: number): void {\n    // Update state\n    this.state.currentAttempt = attemptNumber;\n\n    // Update DOM element\n    const attemptCounter = document.getElementById('current-attempt');\n    if (attemptCounter) {\n      attemptCounter.textContent = attemptNumber.toString();\n    }\n  }\n\n  /**\n   * Display a confirmation message when exercise is saved\n   */\n  public showExerciseSavedConfirmation(): void {\n    if (!this.components.container) return;\n\n    // Create confirmation overlay\n    const confirmationOverlay = document.createElement('div');\n    confirmationOverlay.className = 'confirmation-overlay';\n    confirmationOverlay.innerHTML = `\n      <div class=\"confirmation-content\">\n        <div class=\"confirmation-icon\">✓</div>\n        <div class=\"confirmation-message\">Exercise Saved!</div>\n      </div>\n    `;\n\n    // Add to container\n    this.components.container.appendChild(confirmationOverlay);\n\n    // Force reflow for animation\n    void confirmationOverlay.offsetWidth;\n\n    // Show with fade in\n    confirmationOverlay.style.opacity = '1';\n\n    // Remove after animation\n    setTimeout(() => {\n      confirmationOverlay.style.opacity = '0';\n\n      setTimeout(() => {\n        if (confirmationOverlay.parentElement) {\n          confirmationOverlay.parentElement.removeChild(confirmationOverlay);\n        }\n      }, 300);\n    }, 1500);\n  }\n\n  /**\n   * Display stars for a category with animation\n   * @param selector - CSS selector for star container\n   * @param starCount - Number of stars (1-5)\n   */\n  private displayStars(selector: string, starCount: number): void {\n    const container = document.querySelector(selector) as HTMLElement;\n    if (!container) return;\n\n    // Clamp star count to valid range\n    const validStarCount = Math.max(1, Math.min(5, starCount));\n\n    // Create stars\n    for (let i = 0; i < 5; i++) {\n      const star = document.createElement('div');\n      star.className = i < validStarCount ? 'star star-filled' : 'star star-empty';\n\n      // Add with delay for animation\n      setTimeout(() => {\n        container.appendChild(star);\n\n        // Trigger animation after a small delay\n        setTimeout(() => {\n          star.classList.add('star-animated');\n\n          // Emit event for audio feedback\n          if (i < validStarCount) {\n            this.emit('star-added', i + 1);\n          }\n        }, 50);\n      }, i * 150);\n    }\n  }\n\n  /**\n   * Calculate constraint box size based on attempt number\n   * @param attemptNumber - Current attempt number (1-5)\n   * @returns Constraint box size\n   */\n  private calculateConstraintBoxSize(attemptNumber: number): ConstraintBoxSize {\n    // Base size from configuration\n    const baseSize = this.config.constraintBoxSize;\n\n    // Reduce size with each attempt\n    // Start with 100% of base size and reduce by 15% for each attempt\n    const scaleFactor = Math.max(0.4, 1 - (attemptNumber - 1) * 0.15);\n\n    return {\n      width: baseSize.width * scaleFactor,\n      height: baseSize.height * scaleFactor,\n    };\n  }\n\n  /**\n   * Set loading state\n   * @param message - Optional loading message\n   */\n  public setLoading(message: string = 'Loading...'): void {\n    if (!this.components.container) return;\n\n    // Don't add multiple loading overlays\n    this.clearLoading();\n\n    // Update state\n    this.state.isLoading = true;\n\n    // Create loading overlay\n    const loadingOverlay = document.createElement('div');\n    loadingOverlay.className = 'loading-overlay';\n    loadingOverlay.innerHTML = `\n      <div class=\"loading-spinner\"></div>\n      <div class=\"loading-message\">${message}</div>\n    `;\n\n    // Add to container\n    this.components.container.appendChild(loadingOverlay);\n\n    // Force reflow for animation\n    void loadingOverlay.offsetWidth;\n\n    // Show with fade in\n    (loadingOverlay as HTMLElement).style.opacity = '1';\n  }\n\n  /**\n   * Clear loading state\n   */\n  public clearLoading(): void {\n    if (!this.components.container) return;\n\n    // Update state\n    this.state.isLoading = false;\n\n    // Find existing loading overlay\n    const loadingOverlay = this.components.container.querySelector('.loading-overlay');\n    if (!loadingOverlay) return;\n\n    // Fade out\n    (loadingOverlay as HTMLElement).style.opacity = '0';\n\n    // Remove after animation\n    setTimeout(() => {\n      if (loadingOverlay.parentElement) {\n        loadingOverlay.parentElement.removeChild(loadingOverlay);\n      }\n    }, 300);\n  }\n\n  /**\n   * Show error message\n   * @param message - Error message\n   */\n  public showError(message: string): void {\n    if (!this.components.container) return;\n\n    // Update state\n    this.state.hasError = true;\n    this.state.errorMessage = message;\n\n    // Create error overlay if it doesn't exist\n    let errorOverlay = this.components.container.querySelector('.error-overlay');\n\n    if (!errorOverlay) {\n      errorOverlay = document.createElement('div');\n      errorOverlay.className = 'error-overlay';\n\n      // Create error content\n      errorOverlay.innerHTML = `\n        <div class=\"error-content\">\n          <div class=\"error-icon\">⚠️</div>\n          <div class=\"error-message\">${message}</div>\n          <button class=\"btn btn-primary error-button\">OK</button>\n        </div>\n      `;\n\n      // Add event listener for OK button\n      const okButton = errorOverlay.querySelector('.error-button');\n      if (okButton) {\n        okButton.addEventListener('click', () => {\n          this.clearError();\n        });\n      }\n\n      // Add to container\n      this.components.container.appendChild(errorOverlay);\n\n      // Force reflow for animation\n      void (errorOverlay as HTMLElement).offsetWidth;\n\n      // Show with fade in\n      (errorOverlay as HTMLElement).style.opacity = '1';\n    } else {\n      // Update existing error message\n      const errorMessage = errorOverlay.querySelector('.error-message');\n      if (errorMessage) {\n        errorMessage.textContent = message;\n      }\n    }\n\n    // Emit error event\n    this.emit('error-shown', message);\n  }\n\n  /**\n   * Clear error message\n   */\n  public clearError(): void {\n    if (!this.components.container) return;\n\n    // Update state\n    this.state.hasError = false;\n    this.state.errorMessage = '';\n\n    // Find existing error overlay\n    const errorOverlay = this.components.container.querySelector('.error-overlay');\n    if (!errorOverlay) return;\n\n    // Fade out\n    (errorOverlay as HTMLElement).style.opacity = '0';\n\n    // Remove after animation\n    setTimeout(() => {\n      if (errorOverlay.parentElement) {\n        errorOverlay.parentElement.removeChild(errorOverlay);\n      }\n    }, 300);\n\n    // Emit error cleared event\n    this.emit('error-cleared');\n  }\n\n  /**\n   * Update exercise list\n   * @param exercises - Available exercises\n   * @param thumbnails - Map of exercise ID to thumbnail URL\n   */\n  public updateExerciseList(\n    exercises: Exercise[],\n    thumbnails: { [exerciseId: string]: string }\n  ): void {\n    console.log(`UIManager: updateExerciseList with ${exercises.length} templates`);\n    // Get the exercise list container\n    const exerciseListView = this.components.views.get('exercise-list');\n    if (!exerciseListView) return;\n\n    const exerciseList = exerciseListView.querySelector('.exercise-list');\n    if (!exerciseList) return;\n\n    // Clear existing items\n    exerciseList.innerHTML = '';\n\n    if (exercises.length === 0) {\n      // Show no exercises message\n      const noExercises = document.createElement('div');\n      noExercises.className = 'no-exercises-message';\n      noExercises.textContent = 'No templates found. Create a new template first.';\n      exerciseList.appendChild(noExercises);\n      return;\n    }\n\n    // Create exercise items\n    exercises.forEach(exercise => {\n      const exerciseItem = document.createElement('div');\n      exerciseItem.className = 'exercise-item';\n      exerciseItem.dataset.id = exercise.id;\n\n      // Create thumbnail container\n      const thumbnailContainer = document.createElement('div');\n      thumbnailContainer.className = 'exercise-thumbnail';\n\n      // Add thumbnail if available\n      if (thumbnails[exercise.id]) {\n        const img = document.createElement('img');\n        img.src = thumbnails[exercise.id];\n        img.alt = exercise.name;\n        thumbnailContainer.appendChild(img);\n      } else {\n        // Default placeholder\n        thumbnailContainer.innerHTML = '<div class=\"thumbnail-placeholder\">?</div>';\n      }\n\n      // Create exercise details\n      const details = document.createElement('div');\n      details.className = 'exercise-details';\n\n      // Exercise name\n      const name = document.createElement('div');\n      name.className = 'exercise-name';\n      name.textContent = exercise.name;\n      details.appendChild(name);\n\n      // Exercise date\n      const date = document.createElement('div');\n      date.className = 'exercise-date';\n      date.textContent = exercise.createdAt.toLocaleDateString();\n      details.appendChild(date);\n\n      // High score if available\n      if (exercise.highestScore) {\n        const score = document.createElement('div');\n        score.className = 'exercise-score';\n\n        // Create star container\n        const stars = document.createElement('div');\n        stars.className = 'exercise-stars';\n\n        // Add stars based on overall rating\n        const starCount = exercise.highestScore.categories.overall;\n        for (let i = 0; i < 5; i++) {\n          const star = document.createElement('span');\n          star.className = i < starCount ? 'star-mini star-filled' : 'star-mini star-empty';\n          stars.appendChild(star);\n        }\n\n        score.appendChild(stars);\n        details.appendChild(score);\n      }\n\n      // Assemble exercise item\n      exerciseItem.appendChild(thumbnailContainer);\n      exerciseItem.appendChild(details);\n\n      // Add click handler\n      exerciseItem.addEventListener('click', () => {\n        this.handleExerciseSelection(exercise);\n      });\n\n      // Add to list\n      exerciseList.appendChild(exerciseItem);\n    });\n  }\n}\n","/**\n * Handwriting Exercise Game\n * Main entry point for the application\n */\n\nimport { GameManager } from './core/GameManager';\nimport { DrawingManager } from './core/DrawingManager';\nimport { ScoreManager } from './core/ScoreManager';\nimport { StorageManager } from './services/StorageManager';\nimport { AudioManager } from './services/AudioManager';\nimport { UIManager } from './services/UIManager';\n\n/**\n * Initialize the application\n */\nasync function init(): Promise<void> {\n  console.log('Initializing handwriting exercise game...');\n\n  try {\n    // Show loading screen\n    showLoadingScreen();\n\n    // Get container element\n    const gameContainer = document.getElementById('game-container');\n    if (!gameContainer) {\n      throw new Error('Game container element not found');\n    }\n\n    // Initialize managers\n    const storageManager = new StorageManager();\n    const audioManager = new AudioManager();\n    const drawingManager = new DrawingManager();\n    const scoreManager = new ScoreManager();\n    const uiManager = new UIManager();\n\n    // Initialize storage first to load any saved data\n    await storageManager.initialize();\n    console.log('Storage manager initialized');\n\n    // Initialize UI\n    uiManager.initialize(gameContainer);\n    console.log('UI manager initialized');\n\n    // Initialize drawing\n    drawingManager.initialize();\n    console.log('Drawing manager initialized');\n\n    // Initialize scoring\n    scoreManager.initialize();\n    console.log('Score manager initialized');\n\n    // Setup tablet-specific behaviors\n    setupTabletBehavior();\n\n    // Instantiate GameManager and wire up all game flows through a single coordinator\n    const gameManager = new GameManager({\n      storageManager,\n      audioManager,\n      uiManager,\n      drawingManager,\n      scoreManager,\n      container: gameContainer,\n    });\n    await gameManager.initialize();\n    console.log('Game manager initialized');\n\n    // Hide loading screen and show welcome view (UIManager does this by default)\n    hideLoadingScreen();\n    console.log('Main: init complete, explicitly showing welcome view');\n    uiManager.showView('welcome');\n    console.log('Main: welcome view should now be visible and on top');\n  } catch (error) {\n    console.error('Failed to initialize application:', error);\n    showErrorScreen(error);\n  }\n}\n\n/**\n * Show loading screen\n */\nfunction showLoadingScreen(): void {\n  console.log('Main: showLoadingScreen');\n  const loadingScreen = document.getElementById('loading-screen');\n  if (loadingScreen) {\n    loadingScreen.style.display = 'flex';\n    loadingScreen.style.opacity = '1';\n  }\n}\n\n/**\n * Hide loading screen with fade-out animation\n */\nfunction hideLoadingScreen(): void {\n  console.log('Main: hideLoadingScreen');\n  const loadingScreen = document.getElementById('loading-screen');\n  if (loadingScreen) {\n    loadingScreen.classList.add('fade-out');\n\n    // Remove after animation\n    setTimeout(() => {\n      loadingScreen.style.display = 'none';\n      console.log('Main: loading screen hidden, welcome view should be visible');\n    }, 500);\n  }\n}\n\n/**\n * Set up tablet-specific behaviors\n */\nfunction setupTabletBehavior(): void {\n  // Prevent default touch behaviors on canvas\n  document.addEventListener(\n    'touchstart',\n    event => {\n      if (event.target instanceof HTMLCanvasElement) {\n        event.preventDefault();\n      }\n    },\n    { passive: false }\n  );\n\n  // Prevent scrolling when touching the canvas\n  document.addEventListener(\n    'touchmove',\n    event => {\n      if (event.target instanceof HTMLCanvasElement) {\n        event.preventDefault();\n      }\n    },\n    { passive: false }\n  );\n\n  // Prevent context menu on long-press\n  document.addEventListener('contextmenu', event => {\n    event.preventDefault();\n    return false;\n  });\n\n  // Handle visibility changes (app going to background)\n  document.addEventListener('visibilitychange', () => {\n    if (document.hidden) {\n      // Pause game or mute audio when app goes to background\n      console.log('App went to background');\n    } else {\n      // Resume game when app comes back to foreground\n      console.log('App came to foreground');\n    }\n  });\n}\n\n/**\n * Show error screen when initialization fails\n */\nfunction showErrorScreen(error: unknown): void {\n  const errorMessage = error instanceof Error ? error.message : 'Unknown error occurred';\n\n  const container = document.getElementById('app');\n  if (!container) return;\n\n  // Hide loading screen\n  const loadingScreen = document.getElementById('loading-screen');\n  if (loadingScreen) {\n    loadingScreen.style.display = 'none';\n  }\n\n  // Create error screen\n  const errorScreen = document.createElement('div');\n  errorScreen.className = 'error-screen';\n  errorScreen.innerHTML = `\n    <div class=\"error-content\">\n      <h2>Oops! Something went wrong</h2>\n      <p>${errorMessage}</p>\n      <button class=\"btn btn-primary\" onclick=\"location.reload()\">Try Again</button>\n    </div>\n  `;\n\n  container.appendChild(errorScreen);\n}\n\n// Initialize when DOM is fully loaded\ndocument.addEventListener('DOMContentLoaded', init);\n"],"names":["UIManager","EventEmitter","state","currentView","currentAttempt","isTransitioning","isLoading","hasError","errorMessage","config","isMobile","isLandscape","viewportWidth","viewportHeight","pixelRatio","historyHeight","constraintBoxSize","width","height","animation","exampleAnimationInProgress","attemptAnimationInProgress","scoreAnimationInProgress","components","container","views","Map","drawingCanvas","constraintBox","historyDisplay","buttons","historyItems","initialize","console","log","this","createViewElements","Array","from","keys","setupEventListeners","updateConfiguration","showView","listView","get","style","display","classList","remove","emit","innerHTML","createWelcomeView","createAttemptView","createCreateExerciseView","createScoreView","createExerciseListView","forEach","view","appendChild","document","createElement","className","set","createButton","querySelector","loadButton","addEventListener","doneButton","cancelButton","saveButton","nameInput","name","value","trim","tryAgainButton","menuButton","backButton","window","handleResize","bind","handleOrientationChange","updateLayout","setTimeout","innerWidth","innerHeight","devicePixelRatio","baseSize","Math","min","updateCanvasDimensions","updateConstraintBoxSize","updateHistoryDisplay","canvas","parentElement","rect","getBoundingClientRect","box","size","calculateConstraintBoxSize","drawingArea","areaRect","left","top","viewType","v","type","offsetWidth","add","attemptCounter","getElementById","textContent","toString","error","transitionToView","nextView","opacity","transform","setupAttemptView","attemptNumber","boxSize","showExampleDrawing","drawing","exampleContainer","context","getContext","scale","clearRect","minX","Number","MAX_VALUE","maxX","MIN_VALUE","minY","maxY","stroke","strokes","point","points","x","max","y","originalWidth","originalHeight","canvasWidth","canvasHeight","offsetX","offsetY","length","beginPath","strokeStyle","color","lineWidth","lineCap","lineJoin","firstPoint","scaledX1","scaledY1","moveTo","i","scaledX","scaledY","lineTo","renderDrawing","transformOrigin","exampleItem","clonedCanvas","cloneNode","label","animateDrawingToHistory","originalCanvas","tempCanvas","position","zIndex","tempContext","drawImage","removeChild","historyRect","drawingRect","targetWidth","targetHeight","scaleX","scaleY","targetX","transition","historyItem","historyCanvas","historyContext","sourceWidth","sourceHeight","push","originalContext","showScoreScreen","score","scoreView","scoreNumber","totalScore","feedbackMessage","feedback","querySelectorAll","displayStars","categories","accuracy","timing","overall","handleExerciseSelection","exercise","cleanupAnimations","element","resetHistoryDisplay","updateAttemptCounter","showExerciseSavedConfirmation","confirmationOverlay","selector","starCount","validStarCount","star","scaleFactor","setLoading","message","clearLoading","loadingOverlay","showError","errorOverlay","okButton","clearError","updateExerciseList","exercises","thumbnails","exerciseListView","exerciseList","noExercises","exerciseItem","dataset","id","thumbnailContainer","img","src","alt","details","date","createdAt","toLocaleDateString","highestScore","stars","async","loadingScreen","showLoadingScreen","gameContainer","Error","storageManager","StorageManager","audioManager","AudioManager","drawingManager","DrawingManager","scoreManager","ScoreManager","uiManager","event","target","HTMLCanvasElement","preventDefault","passive","hidden","gameManager","GameManager","hideLoadingScreen","errorScreen","showErrorScreen"],"mappings":"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"}