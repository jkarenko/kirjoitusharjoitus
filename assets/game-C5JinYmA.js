import{E as t}from"./vendor-Agrq7mF9.js";class e{storageManager;audioManager;uiManager;drawingManager;scoreManager;state={currentExercise:null,currentAttempt:0,isPlaying:!1,isCreatingExercise:!1};MAX_ATTEMPTS=5;constructor(t){this.storageManager=t.storageManager,this.audioManager=t.audioManager,this.uiManager=t.uiManager,this.drawingManager=t.drawingManager,this.scoreManager=t.scoreManager,this.handleCreateExercise=this.handleCreateExercise.bind(this),this.handleLoadExercise=this.handleLoadExercise.bind(this),this.handleExerciseSelected=this.handleExerciseSelected.bind(this),this.handleSaveExercise=this.handleSaveExercise.bind(this),this.handleCancelExercise=this.handleCancelExercise.bind(this),this.handleDoneButtonClicked=this.handleDoneButtonClicked.bind(this),this.handleAttemptAnimationComplete=this.handleAttemptAnimationComplete.bind(this),this.handleBackToMenu=this.handleBackToMenu.bind(this),this.handleTryAgain=this.handleTryAgain.bind(this),this.startNextAttempt=this.startNextAttempt.bind(this)}async initialize(){return console.log("Initializing game manager..."),this.setupEventListeners(),this.setupDrawingCanvas(),Promise.resolve()}setupEventListeners(){this.uiManager.on("create-template-clicked",this.handleCreateExercise),this.uiManager.on("load-template-clicked",this.handleLoadExercise),this.uiManager.on("exercise-selected",(t=>this.handleExerciseSelected(t))),this.uiManager.on("save-exercise-clicked",(t=>this.handleSaveExercise(t))),this.uiManager.on("cancel-exercise-clicked",this.handleCancelExercise),this.uiManager.on("done-button-clicked",this.handleDoneButtonClicked),this.uiManager.on("attempt-animation-complete",(t=>this.handleAttemptAnimationComplete(t))),this.uiManager.on("back-to-menu-clicked",this.handleBackToMenu),this.uiManager.on("try-again-clicked",this.handleTryAgain),this.uiManager.on("back-clicked",this.handleBackToMenu),this.uiManager.on("star-added",(t=>{this.audioManager.playStarSound(t)}));let t=null;let e=!1;const s=s=>{s.on("stroke-started",(()=>{e=!1})),s.on("point-added",((...s)=>{const i=s[0];i&&"number"==typeof i.x&&"number"==typeof i.y&&(e?this.audioManager.updateStrokeSound(i.x,i.y):(this.audioManager.startStrokeSound(i.x,i.y),e=!0),this.audioManager.resumeStrokeSound(),t&&clearTimeout(t),t=setTimeout((()=>{this.audioManager.pauseStrokeSound()}),120))})),s.on("stroke-completed",(()=>{t&&clearTimeout(t),this.audioManager.pauseStrokeSound(),this.audioManager.stopStrokeSound(),this.audioManager.playStrokeSound(),e=!1}))};s(this.drawingManager),s(this.uiManager)}setupDrawingCanvas(){const t=document.querySelector(".drawing-canvas");t&&this.drawingManager.setCanvas(t)}showWelcomeScreen(){this.state.currentExercise=null,this.state.currentAttempt=0,this.state.isPlaying=!1,this.state.isCreatingExercise=!1,this.uiManager.showView("welcome")}handleCreateExercise(){console.log("GameManager: handleCreateExercise - user requested to create new template"),this.state.isCreatingExercise=!0,this.uiManager.showView("create-exercise"),this.drawingManager.reset();const t=document.querySelector(".create-exercise-view .drawing-canvas");if(t){const e=t.parentElement;if(e){const s=e.getBoundingClientRect(),i=window.devicePixelRatio||1;t.width=s.width*i,t.height=s.height*i,t.style.width=`${s.width}px`,t.style.height=`${s.height}px`,this.drawingManager.setCanvas(t),this.drawingManager.enable()}}}handleLoadExercise(){console.log("GameManager: handleLoadExercise - fetching saved templates");const t=this.storageManager.getExercises();console.log(`GameManager: handleLoadExercise - loaded ${t.length} templates`,t);const e={};t.forEach((t=>{const s=this.storageManager.getThumbnail(t.id);s&&(e[t.id]=s)})),this.uiManager.updateExerciseList(t,e),this.uiManager.showView("exercise-list")}handleExerciseSelected(t){console.log(`GameManager: handleExerciseSelected - starting game for template id=${t.id} name="${t.name}"`),this.state.currentExercise=t,this.state.currentAttempt=0,this.state.isPlaying=!0,this.uiManager.resetHistoryDisplay(),this.uiManager.showView("attempt"),this.uiManager.showExampleDrawing(t.adultDrawing);const e=()=>{this.startNextAttempt(),this.uiManager.off("example-animation-complete",e)};this.uiManager.on("example-animation-complete",e)}startNextAttempt(){if(this.state.currentAttempt++,this.state.currentAttempt>this.MAX_ATTEMPTS)return void this.showScoreScreen();const t=this.calculateConstraintBoxSize(this.state.currentAttempt);this.uiManager.setupAttemptView(this.state.currentAttempt,t);const e=document.querySelector(".attempt-view .drawing-canvas");e&&(this.drawingManager.setCanvas(e),this.drawingManager.reset(),this.drawingManager.enable()),this.audioManager.playAttemptStartSound()}handleDoneButtonClicked(){if(!this.state.currentExercise)return;this.drawingManager.disable();const t=this.drawingManager.getDrawingData();if(this.state.currentExercise&&this.state.currentAttempt>0&&this.state.currentAttempt<=this.MAX_ATTEMPTS){for(;this.state.currentExercise.attempts.length<this.state.currentAttempt;)this.state.currentExercise.attempts.push({strokes:[],totalTime:0,width:0,height:0,created:Date.now()});this.state.currentExercise.attempts[this.state.currentAttempt-1]=t}this.audioManager.playAttemptCompleteSound(),this.uiManager.animateDrawingToHistory(this.state.currentAttempt,t)}handleAttemptAnimationComplete(t){t>=this.MAX_ATTEMPTS?this.showScoreScreen():this.startNextAttempt()}showScoreScreen(){if(!this.state.currentExercise)return;const t=this.scoreManager.calculateScore(this.state.currentExercise.adultDrawing,this.state.currentExercise.attempts);this.saveExerciseResult(this.state.currentExercise,t),this.uiManager.showScoreScreen(t),this.audioManager.playFanfareSound()}async saveExerciseResult(t,e){try{await this.storageManager.saveExerciseResult(t,e)}catch(s){console.error("Failed to save exercise result:",s),this.uiManager.showError("Failed to save your score")}}handleSaveExercise(t){const e=this.drawingManager.getDrawingData(),s={id:Date.now().toString(),name:t.name,createdAt:new Date,adultDrawing:e,attempts:[],highestScore:null};this.storageManager.saveExercise(s).then((()=>{this.uiManager.showExerciseSavedConfirmation(),setTimeout((()=>{this.state.isCreatingExercise=!1,this.uiManager.showView("welcome")}),1500)})).catch((t=>{console.error("Failed to save exercise:",t),this.uiManager.showError("Failed to save exercise")}))}handleCancelExercise(){this.state.isCreatingExercise=!1,this.uiManager.showView("welcome")}handleBackToMenu(){this.state.currentExercise=null,this.state.currentAttempt=0,this.state.isPlaying=!1,this.state.isCreatingExercise=!1,this.uiManager.cleanupAnimations(),this.uiManager.resetHistoryDisplay(),this.uiManager.showView("welcome")}handleTryAgain(){this.state.currentExercise&&(this.state.currentAttempt=0,this.uiManager.resetHistoryDisplay(),this.uiManager.showView("attempt"),this.uiManager.showExampleDrawing(this.state.currentExercise.adultDrawing),this.uiManager.on("example-animation-complete",(()=>{this.startNextAttempt(),this.uiManager.off("example-animation-complete",this.startNextAttempt)})))}calculateConstraintBoxSize(t){const e=window.innerWidth,s=window.innerHeight,i=.6*Math.min(e,s),a=1===t?1:Math.max(.4,1-.01*(t-1));return{width:i*a,height:i*a}}startGameWithExercise(t){this.handleExerciseSelected(t)}}class s extends t{canvas=null;context=null;isDrawing=!1;isEnabled=!1;currentStroke=null;strokes=[];strokeCounter=0;startTime=0;endTime=0;strokeColor="#000000";strokeWidth=3;initialize(t){if(t?this.canvas=t:(this.canvas=document.createElement("canvas"),this.canvas.classList.add("drawing-canvas")),this.context=this.canvas.getContext("2d"),!this.context)throw new Error("Could not get canvas context");this.setupEventListeners(),this.reset()}setupEventListeners(){this.canvas&&(this.canvas.addEventListener("touchstart",this.handleTouchStart.bind(this)),this.canvas.addEventListener("touchmove",this.handleTouchMove.bind(this)),this.canvas.addEventListener("touchend",this.handleTouchEnd.bind(this)),this.canvas.addEventListener("mousedown",this.handleMouseDown.bind(this)),this.canvas.addEventListener("mousemove",this.handleMouseMove.bind(this)),this.canvas.addEventListener("mouseup",this.handleMouseUp.bind(this)),this.canvas.addEventListener("mouseleave",this.handleMouseUp.bind(this)))}reset(){this.strokes=[],this.strokeCounter=0,this.startTime=0,this.endTime=0,this.isDrawing=!1,this.currentStroke=null,this.canvas&&this.context&&this.context.clearRect(0,0,this.canvas.width,this.canvas.height)}enable(){this.isEnabled=!0,this.canvas&&(this.canvas.style.pointerEvents="auto")}disable(){this.isEnabled=!1,this.isDrawing=!1,this.currentStroke=null,this.canvas&&(this.canvas.style.pointerEvents="none")}setStrokeColor(t){this.strokeColor=t}setStrokeWidth(t){this.strokeWidth=t}handleTouchStart(t){if(!this.isEnabled)return;t.preventDefault();const e=t.touches[0];this.startStroke(e.clientX,e.clientY,e.force)}handleTouchMove(t){if(!this.isEnabled||!this.isDrawing)return;t.preventDefault();const e=t.touches[0];this.continueStroke(e.clientX,e.clientY,e.force)}handleTouchEnd(t){this.isEnabled&&(t.preventDefault(),this.endStroke())}handleMouseDown(t){this.isEnabled&&(t.preventDefault(),this.startStroke(t.clientX,t.clientY))}handleMouseMove(t){this.isEnabled&&this.isDrawing&&(t.preventDefault(),this.continueStroke(t.clientX,t.clientY))}handleMouseUp(t){this.isEnabled&&(t.preventDefault(),this.endStroke())}startStroke(t,e,s=1){if(!this.canvas||!this.context)return;const i=this.canvas.getBoundingClientRect(),a=this.canvas.width/i.width,n=(t-i.left)*a,r=(e-i.top)*a,o=Date.now();0===this.strokes.length&&(this.startTime=o),this.isDrawing=!0,this.currentStroke={id:this.strokeCounter++,points:[{x:n,y:r,timestamp:o,pressure:s}],startTime:o,endTime:o,color:this.strokeColor,width:this.strokeWidth},this.context.lineWidth=3,this.context.lineCap="round",this.context.lineJoin="round",this.context.strokeStyle=this.strokeColor,this.context.beginPath(),this.context.moveTo(n,r),this.emit("stroke-started",this.currentStroke)}continueStroke(t,e,s=1){if(!this.canvas||!this.context||!this.currentStroke)return;const i=this.canvas.getBoundingClientRect(),a=this.canvas.width/i.width,n=(t-i.left)*a,r=(e-i.top)*a,o=Date.now();this.currentStroke.points.push({x:n,y:r,timestamp:o,pressure:s}),this.context.lineTo(n,r),this.context.stroke(),this.context.beginPath(),this.context.moveTo(n,r),this.emit("point-added",{x:n,y:r,timestamp:o,pressure:s})}endStroke(){if(!this.currentStroke)return;const t=Date.now();this.currentStroke.endTime=t,this.endTime=t,this.strokes.push(this.currentStroke),this.isDrawing=!1,this.currentStroke=null,this.emit("stroke-completed",this.strokes[this.strokes.length-1])}setCanvas(t){this.canvas=t,this.context=t.getContext("2d"),this.setupEventListeners()}getCanvas(){return this.canvas}getDrawingData(){return{strokes:[...this.strokes],totalTime:this.endTime-this.startTime,width:this.canvas?.width||0,height:this.canvas?.height||0,created:Date.now()}}}class i extends t{MAX_SCORE=100;WEIGHTS={accuracy:.5,strokes:.25,timing:.25};FEEDBACK={excellent:["Excellent work! Your drawing is spot on!","Amazing job! Your handwriting is fantastic!","Perfect! You've mastered this drawing!"],veryGood:["Very good! Your drawing looks great!","Impressive work! Keep practicing!","Great job! You're getting better each time!"],good:["Good job! You're making progress!","Nice work! Keep practicing!","Well done! You're improving!"],fair:["Nice try! Keep practicing!","Good effort! Try to follow the example more closely!","Keep going! Practice makes perfect!"],needsWork:["Keep practicing! You'll get better each time!","Good start! Try to follow the example more carefully!","Don't give up! Every practice helps you improve!"]};initialize(){}calculateScore(t,e,s){const i=e[e.length-1];if(!i)throw new Error("No attempts provided for scoring");const a=this.calculateAccuracyScore(t,i,s?.[e.length-1]);console.log("accuracyScore",a);const n=this.calculateStrokesScore(t,i);console.log("strokesScore",n);const r=this.calculateTimingScore(t,i);console.log("timingScore",r);const o=Math.round((a*this.WEIGHTS.accuracy+n*this.WEIGHTS.strokes+r*this.WEIGHTS.timing)*this.MAX_SCORE);console.log("overallScore",o);const h={accuracy:this.normalizedScoreToStars(a),strokes:this.normalizedScoreToStars(n),timing:this.normalizedScoreToStars(r),overall:this.normalizedScoreToStars(o/this.MAX_SCORE)};console.log("categories",h);const c=this.generateFeedback(o);console.log("feedback",c);const l={totalScore:o,categories:h,feedback:c,timestamp:Date.now()};return console.log("scoreResult",l),this.emit("score-calculated",l),l}calculateAccuracyScore(t,e,s){const i=this.normalizeDrawing(t),a=this.normalizeDrawing(e);let n=0,r=1;return n=this.calculatePathSimilarity(i,a),s&&(r=this.calculateConstraintAdherence(e,s)),.75*n+.25*r}calculateStrokesScore(t,e){const s=t.strokes.length,i=e.strokes.length,a=Math.abs(s-i),n=Math.max(s,i);return.5*(n>0?Math.max(0,1-a/n):1)+.5*this.compareStrokeLengths(t,e)}calculateTimingScore(t,e){return.4*this.compareTimingRatio(t,e)+.6*this.compareStrokeTimingPatterns(t,e)}calculatePathSimilarity(t,e){if(0===t.strokes.length||0===e.strokes.length)return 0;const s=this.getAllPoints(t),i=this.getAllPoints(e);if(0===s.length||0===i.length)return 0;let a=0;for(const r of i){let t=Number.MAX_VALUE;for(const e of s){const s=this.calculateDistance(r,e);t=Math.min(t,s)}a+=t}const n=a/i.length;return Math.exp(5*-n)}calculateConstraintAdherence(t,e){let s=0,i=0;const a=t.width/2,n=t.height/2,r=a-e.width/2,o=a+e.width/2,h=n-e.height/2,c=n+e.height/2;for(const l of t.strokes)for(const t of l.points)s++,(t.x<r||t.x>o||t.y<h||t.y>c)&&i++;return s>0?1-i/s:1}compareStrokeLengths(t,e){if(0===t.strokes.length||0===e.strokes.length)return 0;const s=this.calculateRelativeStrokeLengths(t),i=this.calculateRelativeStrokeLengths(e),a=Math.min(s.length,i.length);if(0===a)return 0;let n=0;for(let r=0;r<a;r++){n+=Math.abs(s[r]-i[r])}return n+=.1*Math.abs(s.length-i.length),Math.max(0,1-n/a)}compareTimingRatio(t,e){if(t.totalTime<=0||e.totalTime<=0)return.5;const s=e.totalTime/t.totalTime;return Math.exp(-Math.pow(Math.log(s),2))}compareStrokeTimingPatterns(t,e){if(t.strokes.length<2||e.strokes.length<2)return.5;const s=this.calculateRelativeStrokeDurations(t),i=this.calculateRelativeStrokeDurations(e),a=Math.min(s.length,i.length);if(a<2)return.5;let n=0;for(let r=0;r<a;r++){n+=Math.abs(s[r]-i[r])}return Math.max(0,1-n/a)}calculateRelativeStrokeLengths(t){const e=[];let s=0;for(const i of t.strokes){let t=0;for(let e=1;e<i.points.length;e++){const s=i.points[e-1],a=i.points[e];t+=this.calculateDistance(s,a)}e.push(t),s+=t}return e.map((t=>s>0?t/s:0))}calculateRelativeStrokeDurations(t){const e=[];let s=0;for(const i of t.strokes){const t=i.endTime-i.startTime;e.push(t),s+=t}return e.map((t=>s>0?t/s:0))}normalizeDrawing(t){if(0===t.strokes.length)return{strokes:[],totalTime:t.totalTime,width:t.width,height:t.height,created:t.created};let e=Number.MAX_VALUE,s=Number.MIN_VALUE,i=Number.MAX_VALUE,a=Number.MIN_VALUE;for(const h of t.strokes)for(const t of h.points)e=Math.min(e,t.x),s=Math.max(s,t.x),i=Math.min(i,t.y),a=Math.max(a,t.y);const n=s-e,r=a-i,o=n>0&&r>0?Math.min(1/n,1/r):1;return{strokes:t.strokes.map((t=>{const s=t.points.map((t=>({x:(t.x-e)*o,y:(t.y-i)*o,timestamp:t.timestamp,pressure:t.pressure})));return{id:t.id,points:s,startTime:t.startTime,endTime:t.endTime,color:t.color,width:t.width}})),totalTime:t.totalTime,width:1,height:r/n,created:t.created}}getAllPoints(t){const e=[];for(const s of t.strokes)e.push(...s.points);return e}calculateDistance(t,e){const s=e.x-t.x,i=e.y-t.y;return Math.sqrt(s*s+i*i)}normalizedScoreToStars(t){const e=Math.max(0,Math.min(1,t));return Math.round(4*e+1)}generateFeedback(t){let e;e=t>=90?"excellent":t>=75?"veryGood":t>=60?"good":t>=40?"fair":"needsWork";const s=this.FEEDBACK[e];return s[Math.floor(Math.random()*s.length)]}}export{s as D,e as G,i as S};
//# sourceMappingURL=game-C5JinYmA.js.map
