{"version":3,"file":"index-CUhef9Ja.js","sources":["../../src/utils/AnimationController.ts","../../src/utils/ExampleDrawingAnimator.ts","../../src/services/UIManager.ts","../../src/main.ts"],"sourcesContent":["// AnimationController: schedules animation tasks using requestAnimationFrame\nexport type AnimationTask = {\n  callback: (dt: number) => boolean; // return true when done\n};\n\nexport class AnimationController {\n  private tasks: Map<string, AnimationTask> = new Map();\n  private running = false;\n  private lastTimestamp = 0;\n  private rafId: number | null = null;\n  private idCounter = 0;\n\n  public schedule(callback: (dt: number) => boolean): string {\n    const id = `task_${this.idCounter++}`;\n    this.tasks.set(id, { callback });\n    this.start();\n    return id;\n  }\n\n  public cancel(handle: string): void {\n    this.tasks.delete(handle);\n    if (this.tasks.size === 0) {\n      this.stop();\n    }\n  }\n\n  public start(): void {\n    if (!this.running) {\n      this.running = true;\n      this.lastTimestamp = performance.now();\n      this.rafId = requestAnimationFrame(this.loop);\n    }\n  }\n\n  public stop(): void {\n    this.running = false;\n    if (this.rafId !== null) {\n      cancelAnimationFrame(this.rafId);\n      this.rafId = null;\n    }\n  }\n\n  private loop = (timestamp: number): void => {\n    if (!this.running) {\n      return;\n    }\n    const dt = timestamp - this.lastTimestamp;\n    this.lastTimestamp = timestamp;\n    // Copy tasks to avoid mutation during iteration\n    for (const [id, task] of Array.from(this.tasks.entries())) {\n      const done = task.callback(dt);\n      if (done) {\n        this.tasks.delete(id);\n      }\n    }\n    if (this.tasks.size > 0) {\n      this.rafId = requestAnimationFrame(this.loop);\n    } else {\n      this.stop();\n    }\n  };\n}\n","import { AnimationController } from './AnimationController';\nimport { DrawingData, StrokeData } from '../types/Exercise';\nimport { EventEmitter } from './EventEmitter';\n\nexport interface ExampleDrawingAnimatorOptions {\n  ctx: CanvasRenderingContext2D;\n  emitter: EventEmitter;\n  controller: AnimationController;\n  pointIntervalMs?: number; // default: 20\n  strokePauseMs?: number; // default: 200\n}\n\nexport class ExampleDrawingAnimator {\n  private ctx: CanvasRenderingContext2D;\n  private emitter: EventEmitter;\n  private controller: AnimationController;\n  private pointIntervalMs: number;\n  private strokePauseMs: number;\n  private _currentTaskHandle: string | null = null;\n\n  public get currentTaskHandle(): string | null {\n    return this._currentTaskHandle;\n  }\n  public set currentTaskHandle(value: string | null) {\n    this._currentTaskHandle = value;\n  }\n\n  constructor(options: ExampleDrawingAnimatorOptions) {\n    this.ctx = options.ctx;\n    this.emitter = options.emitter;\n    this.controller = options.controller;\n    this.pointIntervalMs = options.pointIntervalMs ?? 20;\n    this.strokePauseMs = options.strokePauseMs ?? 200;\n  }\n\n  public async play(drawing: DrawingData): Promise<void> {\n    if (!drawing.strokes.length) {\n      throw new Error('No strokes to animate');\n    }\n    for (let s = 0; s < drawing.strokes.length; s++) {\n      const stroke = drawing.strokes[s];\n      await this.animateStroke(stroke);\n      if (s < drawing.strokes.length - 1) {\n        await this.pause(this.strokePauseMs);\n      }\n    }\n  }\n\n  private animateStroke(stroke: StrokeData): Promise<void> {\n    return new Promise(resolve => {\n      if (stroke.points.length < 2) {\n        this.emitter.emit('stroke-started', stroke);\n        this.emitter.emit('stroke-completed', stroke);\n        resolve();\n        return;\n      }\n      let i = 0;\n      let elapsed = 0;\n      this.ctx.beginPath();\n      this.ctx.strokeStyle = stroke.color;\n      this.ctx.lineWidth = 3;\n      this.ctx.lineCap = 'round';\n      this.ctx.lineJoin = 'round';\n      const [first, ...rest] = stroke.points;\n      this.ctx.moveTo(first.x, first.y);\n      this.emitter.emit('stroke-started', stroke);\n      const step = (dt: number): boolean => {\n        elapsed += dt;\n        while (elapsed >= this.pointIntervalMs && i < rest.length) {\n          const pt = rest[i];\n          this.ctx.lineTo(pt.x, pt.y);\n          this.ctx.stroke();\n          this.emitter.emit('point-added', pt);\n          i++;\n          elapsed -= this.pointIntervalMs;\n        }\n        if (i >= rest.length) {\n          this.emitter.emit('stroke-completed', stroke);\n          resolve();\n          return true; // done\n        }\n        return false; // not done\n      };\n      this.currentTaskHandle = this.controller.schedule(step);\n    });\n  }\n\n  private pause(ms: number): Promise<void> {\n    return new Promise(resolve => {\n      let elapsed = 0;\n      const step = (dt: number): boolean => {\n        elapsed += dt;\n        if (elapsed >= ms) {\n          resolve();\n          return true;\n        }\n        return false;\n      };\n      this.currentTaskHandle = this.controller.schedule(step);\n    });\n  }\n}\n","/**\n * UIManager class\n * Handles the game's user interface and state management\n */\n\nimport { EventEmitter } from '../utils/EventEmitter';\nimport { ViewType, Exercise, DrawingData, ScoreResult, ConstraintBoxSize } from '../types/Exercise';\nimport { AnimationController } from '../utils/AnimationController';\nimport { ExampleDrawingAnimator } from '../utils/ExampleDrawingAnimator';\n\n/**\n * Game UI state\n */\ninterface GameState {\n  currentView: ViewType;\n  currentAttempt: number;\n  isTransitioning: boolean;\n  isLoading: boolean;\n  hasError: boolean;\n  errorMessage: string;\n}\n\n/**\n * UI configuration for responsive layout\n */\ninterface UIConfiguration {\n  isMobile: boolean;\n  isLandscape: boolean;\n  viewportWidth: number;\n  viewportHeight: number;\n  pixelRatio: number;\n  historyHeight: number;\n  constraintBoxSize: ConstraintBoxSize;\n}\n\n/**\n * Animation state\n */\ninterface AnimationState {\n  exampleAnimationInProgress: boolean;\n  attemptAnimationInProgress: boolean;\n  scoreAnimationInProgress: boolean;\n}\n\n/**\n * View components container\n */\ninterface ViewComponents {\n  container: HTMLElement | null;\n  views: Map<ViewType, HTMLElement>;\n  drawingCanvas: HTMLCanvasElement | null;\n  constraintBox: HTMLElement | null;\n  historyDisplay: HTMLElement | null;\n  buttons: Map<string, HTMLButtonElement>;\n}\n\nexport class UIManager extends EventEmitter {\n  // State\n  private state: GameState = {\n    currentView: 'welcome',\n    currentAttempt: 0,\n    isTransitioning: false,\n    isLoading: false,\n    hasError: false,\n    errorMessage: '',\n  };\n\n  // Configuration\n  private config: UIConfiguration = {\n    isMobile: false,\n    isLandscape: false,\n    viewportWidth: 0,\n    viewportHeight: 0,\n    pixelRatio: 1,\n    historyHeight: 120,\n    constraintBoxSize: { width: 300, height: 300 },\n  };\n\n  // Animation state\n  private animation: AnimationState = {\n    exampleAnimationInProgress: false,\n    attemptAnimationInProgress: false,\n    scoreAnimationInProgress: false,\n  };\n\n  // UI Components\n  private components: ViewComponents = {\n    container: null,\n    views: new Map(),\n    drawingCanvas: null,\n    constraintBox: null,\n    historyDisplay: null,\n    buttons: new Map(),\n  };\n\n  // History of drawing attempts\n  private historyItems: HTMLElement[] = [];\n\n  private exampleAnimationController: AnimationController | null = null;\n  private exampleAnimator: ExampleDrawingAnimator | null = null;\n\n  /**\n   * Initialize the UI manager\n   * @param container - Container element for the game\n   */\n  public initialize(container: HTMLElement): void {\n    console.log('UIManager: initialize - starting');\n    this.components.container = container;\n\n    // Create view elements\n    console.log('UIManager: initialize - creating view elements');\n    this.createViewElements();\n    console.log('UIManager: initialize - created views:', Array.from(this.components.views.keys()));\n\n    // Set up event listeners\n    this.setupEventListeners();\n\n    // Configure for current device\n    this.updateConfiguration();\n\n    // Reset currentView so that showView('welcome') will always execute\n    (this.state as GameState).currentView = 'welcome' as ViewType;\n    this.showView('welcome');\n    console.log('UIManager: initialize - forcibly hiding exercise-list view');\n    const listView = this.components.views.get('exercise-list');\n    if (listView) {\n      listView.style.display = 'none';\n      listView.classList.remove('active');\n    }\n\n    // Emit initialized event\n    this.emit('ui-initialized');\n  }\n\n  /**\n   * Create view elements for each game view\n   */\n  private createViewElements(): void {\n    console.log('UIManager: createViewElements - started');\n    if (!this.components.container) {\n      return;\n    }\n\n    // Clear container\n    this.components.container.innerHTML = '';\n\n    // Create views\n    console.log('UIManager: createViewElements - creating welcome view');\n    this.createWelcomeView();\n    console.log('UIManager: createViewElements - creating attempt view');\n    this.createAttemptView();\n    console.log('UIManager: createViewElements - creating create-exercise view');\n    this.createCreateExerciseView();\n    console.log('UIManager: createViewElements - creating score view');\n    this.createScoreView();\n    console.log('UIManager: createViewElements - creating exercise-list view');\n    this.createExerciseListView();\n\n    // Append views to container\n    this.components.views.forEach(view => {\n      this.components.container?.appendChild(view);\n    });\n    console.log('UIManager: createViewElements - appended all views');\n  }\n\n  /**\n   * Create welcome view\n   */\n  private createWelcomeView(): void {\n    const view = document.createElement('div');\n    view.className = 'view welcome-view';\n    view.innerHTML = `\n      <div class=\"welcome-content\">\n        <h1>Handwriting Exercise</h1>\n        <p>Practice your handwriting skills</p>\n        <div class=\"button-container\">\n          <button class=\"btn btn-primary\" id=\"btn-create-template\">Create New Template</button>\n          <button class=\"btn btn-secondary\" id=\"btn-load-template\">Load Saved Template</button>\n        </div>\n      </div>\n    `;\n\n    this.components.views.set('welcome', view);\n\n    // Add button references\n    const createButton = view.querySelector('#btn-create-template') as HTMLButtonElement;\n    const loadButton = view.querySelector('#btn-load-template') as HTMLButtonElement;\n\n    if (createButton) {\n      this.components.buttons.set('create-template', createButton);\n      createButton.addEventListener('click', () => {\n        this.emit('create-template-clicked');\n      });\n    }\n\n    if (loadButton) {\n      this.components.buttons.set('load-template', loadButton);\n      loadButton.addEventListener('click', () => {\n        this.emit('load-template-clicked');\n      });\n    }\n  }\n\n  /**\n   * Create attempt view for drawing practice\n   */\n  private createAttemptView(): void {\n    const view = document.createElement('div');\n    view.className = 'view attempt-view';\n    view.innerHTML = `\n      <div class=\"history-display\"></div>\n      <div class=\"drawing-area\">\n        <div class=\"example-display\">\n          <div class=\"example-container\"></div>\n        </div>\n        <div class=\"constraint-box\"></div>\n        <canvas class=\"drawing-canvas\"></canvas>\n      </div>\n      <div class=\"controls\">\n        <button class=\"btn btn-done\" id=\"btn-done\">Done</button>\n      </div>\n      <div class=\"attempt-info\">\n        <div class=\"attempt-counter\">Attempt <span id=\"current-attempt\">1</span>/5</div>\n      </div>\n    `;\n\n    this.components.views.set('attempt', view);\n\n    // Store references to important elements\n    this.components.historyDisplay = view.querySelector('.history-display');\n    this.components.drawingCanvas = view.querySelector('.drawing-canvas');\n    this.components.constraintBox = view.querySelector('.constraint-box');\n\n    // Add button references\n    const doneButton = view.querySelector('#btn-done') as HTMLButtonElement;\n    if (doneButton) {\n      this.components.buttons.set('done', doneButton);\n      doneButton.addEventListener('click', () => {\n        this.emit('done-button-clicked');\n      });\n    }\n  }\n\n  /**\n   * Create exercise creation view\n   */\n  private createCreateExerciseView(): void {\n    const view = document.createElement('div');\n    view.className = 'view create-exercise-view';\n    view.innerHTML = `\n      <div class=\"create-exercise-content\">\n        <h2>Create New Exercise</h2>\n        <p>Draw an example for the child to practice</p>\n        <div class=\"drawing-container\">\n          <canvas class=\"drawing-canvas\"></canvas>\n        </div>\n        <div class=\"exercise-form\">\n          <div class=\"form-group\">\n            <label for=\"exercise-name\">Exercise Name:</label>\n            <input type=\"text\" id=\"exercise-name\" placeholder=\"Enter a name for this exercise\">\n          </div>\n        </div>\n        <div class=\"controls\">\n          <button class=\"btn btn-secondary\" id=\"btn-cancel-exercise\">Cancel</button>\n          <button class=\"btn btn-primary\" id=\"btn-save-exercise\">Save Exercise</button>\n        </div>\n      </div>\n    `;\n\n    this.components.views.set('create-exercise', view);\n\n    // Add button references\n    const cancelButton = view.querySelector('#btn-cancel-exercise') as HTMLButtonElement;\n    const saveButton = view.querySelector('#btn-save-exercise') as HTMLButtonElement;\n\n    if (cancelButton) {\n      this.components.buttons.set('cancel-exercise', cancelButton);\n      cancelButton.addEventListener('click', () => {\n        this.emit('cancel-exercise-clicked');\n      });\n    }\n\n    if (saveButton) {\n      this.components.buttons.set('save-exercise', saveButton);\n      saveButton.addEventListener('click', () => {\n        const nameInput = view.querySelector('#exercise-name') as HTMLInputElement;\n        const name = nameInput?.value.trim() || 'Untitled Exercise';\n        this.emit('save-exercise-clicked', { name });\n      });\n    }\n  }\n\n  /**\n   * Create score view\n   */\n  private createScoreView(): void {\n    const view = document.createElement('div');\n    view.className = 'view score-view';\n    view.innerHTML = `\n      <div class=\"score-content\">\n        <h2>Great Job!</h2>\n        <div class=\"score-display\">\n          <div class=\"total-score\">\n            <span class=\"score-number\">0</span>/100\n          </div>\n          <div class=\"feedback-message\">\n            Well done! Keep practicing!\n          </div>\n          <div class=\"star-ratings\">\n            <div class=\"rating-category\">\n              <div class=\"category-name\">Accuracy</div>\n              <div class=\"stars accuracy-stars\"></div>\n            </div>\n            <div class=\"rating-category\">\n              <div class=\"category-name\">Strokes</div>\n              <div class=\"stars strokes-stars\"></div>\n            </div>\n            <div class=\"rating-category\">\n              <div class=\"category-name\">Timing</div>\n              <div class=\"stars timing-stars\"></div>\n            </div>\n            <div class=\"rating-category\">\n              <div class=\"category-name\">Overall</div>\n              <div class=\"stars overall-stars\"></div>\n            </div>\n          </div>\n        </div>\n        <div class=\"controls\">\n          <button class=\"btn btn-secondary\" id=\"btn-try-again\">Try Again</button>\n          <button class=\"btn btn-primary\" id=\"btn-back-to-menu\">Back to Menu</button>\n        </div>\n      </div>\n    `;\n\n    this.components.views.set('score', view);\n\n    // Add button references\n    const tryAgainButton = view.querySelector('#btn-try-again') as HTMLButtonElement;\n    const menuButton = view.querySelector('#btn-back-to-menu') as HTMLButtonElement;\n\n    if (tryAgainButton) {\n      this.components.buttons.set('try-again', tryAgainButton);\n      tryAgainButton.addEventListener('click', () => {\n        this.emit('try-again-clicked');\n      });\n    }\n\n    if (menuButton) {\n      this.components.buttons.set('back-to-menu', menuButton);\n      menuButton.addEventListener('click', () => {\n        this.emit('back-to-menu-clicked');\n      });\n    }\n  }\n\n  /**\n   * Create exercise list view\n   */\n  private createExerciseListView(): void {\n    const view = document.createElement('div');\n    view.className = 'view exercise-list-view';\n    view.style.display = 'none';\n    view.innerHTML = `\n      <h2>Load Saved Template</h2>\n      <div class=\"controls\">\n        <button class=\"btn btn-secondary\" id=\"btn-back\">Cancel</button>\n      </div>\n      <div class=\"exercise-list\">\n        <!-- Exercise items will be inserted dynamically -->\n      </div>\n    `;\n\n    this.components.views.set('exercise-list', view);\n\n    // Add button references\n    const backButton = view.querySelector('#btn-back') as HTMLButtonElement;\n\n    if (backButton) {\n      this.components.buttons.set('back', backButton);\n      backButton.addEventListener('click', () => {\n        this.emit('back-clicked');\n      });\n    }\n  }\n\n  /**\n   * Set up event listeners\n   */\n  private setupEventListeners(): void {\n    // Window resize\n    window.addEventListener('resize', this.handleResize.bind(this));\n\n    // Device orientation change\n    window.addEventListener('orientationchange', this.handleOrientationChange.bind(this));\n  }\n\n  /**\n   * Handle window resize\n   */\n  private handleResize(): void {\n    this.updateConfiguration();\n    this.updateLayout();\n  }\n\n  /**\n   * Handle orientation change\n   */\n  private handleOrientationChange(): void {\n    setTimeout(() => {\n      this.updateConfiguration();\n      this.updateLayout();\n    }, 300); // Slight delay to ensure dimensions are updated\n  }\n\n  /**\n   * Update configuration based on current window/device\n   */\n  private updateConfiguration(): void {\n    const width = window.innerWidth;\n    const height = window.innerHeight;\n\n    this.config.viewportWidth = width;\n    this.config.viewportHeight = height;\n    this.config.isLandscape = width > height;\n    this.config.isMobile = width < 768;\n    this.config.pixelRatio = window.devicePixelRatio || 1;\n    this.config.historyHeight = this.config.isMobile ? 100 : 120;\n\n    // Update constraint box size based on viewport\n    const minDimension = Math.min(width, height);\n    const baseSize = minDimension * 0.6; // 60% of smaller dimension\n\n    this.config.constraintBoxSize = {\n      width: baseSize,\n      height: baseSize,\n    };\n  }\n\n  /**\n   * Update layout based on current configuration\n   */\n  private updateLayout(): void {\n    // Update drawing canvas dimensions\n    this.updateCanvasDimensions();\n\n    // Update constraint box size\n    this.updateConstraintBoxSize();\n\n    // Update history display\n    this.updateHistoryDisplay();\n  }\n\n  /**\n   * Update canvas dimensions to match device pixel ratio\n   */\n  private updateCanvasDimensions(): void {\n    if (!this.components.drawingCanvas) {\n      return;\n    }\n\n    const canvas = this.components.drawingCanvas;\n    const container = canvas.parentElement;\n\n    if (!container) {\n      return;\n    }\n\n    // Get container dimensions\n    const rect = container.getBoundingClientRect();\n\n    // Set canvas dimensions with pixel ratio adjustment\n    canvas.width = rect.width * this.config.pixelRatio;\n    canvas.height = rect.height * this.config.pixelRatio;\n\n    // Set display size\n    canvas.style.width = `${rect.width}px`;\n    canvas.style.height = `${rect.height}px`;\n  }\n\n  /**\n   * Update constraint box size based on current attempt\n   */\n  private updateConstraintBoxSize(): void {\n    if (!this.components.constraintBox) {\n      return;\n    }\n\n    const box = this.components.constraintBox;\n\n    // Set size based on configuration and current attempt\n    const size = this.calculateConstraintBoxSize(this.state.currentAttempt);\n\n    box.style.width = `${size.width}px`;\n    box.style.height = `${size.height}px`;\n\n    // Center the box in the drawing area\n    const drawingArea = box.parentElement;\n    if (drawingArea) {\n      const areaRect = drawingArea.getBoundingClientRect();\n      box.style.left = `${(areaRect.width - size.width) / 2}px`;\n      box.style.top = `${(areaRect.height - size.height) / 2}px`;\n    }\n  }\n\n  /**\n   * Update history display area\n   */\n  private updateHistoryDisplay(): void {\n    if (!this.components.historyDisplay) {\n      return;\n    }\n\n    // Set height based on configuration\n    this.components.historyDisplay.style.height = `${this.config.historyHeight}px`;\n  }\n\n  /**\n   * Show a specific view\n   * @param viewType - Type of view to show\n   */\n  public showView(viewType: ViewType): void {\n    console.log(`UIManager: showView called with viewType='${viewType}'`);\n    // Don't change views during transition\n    if (this.state.isTransitioning) {\n      return;\n    }\n\n    // Get view element\n    const view = this.components.views.get(viewType);\n\n    if (!view) {\n      console.error(`View not found: ${viewType}`);\n      return;\n    }\n\n    // If it's already the current view, do nothing\n    // if (this.state.currentView === viewType) return;\n\n    // Hide all views\n    this.components.views.forEach((v, type) => {\n      if (type !== viewType) {\n        v.style.display = 'none';\n        v.classList.remove('active');\n      }\n    });\n\n    // Show the selected view\n    view.style.display = 'flex';\n\n    // Trigger reflow to ensure transitions work\n    void view.offsetWidth;\n\n    // Add active class for transitions\n    view.classList.add('active');\n\n    // Update state\n    this.state.currentView = viewType;\n\n    // If showing attempt view, update attempt counter\n    if (viewType === 'attempt') {\n      const attemptCounter = document.getElementById('current-attempt');\n      if (attemptCounter) {\n        attemptCounter.textContent = this.state.currentAttempt.toString();\n      }\n    }\n\n    // Emit view changed event\n    this.emit('view-changed', viewType);\n  }\n\n  /**\n   * Transition to a view with animation\n   * @param viewType - Type of view to transition to\n   */\n  public transitionToView(viewType: ViewType): void {\n    if (this.state.isTransitioning) {\n      return;\n    }\n\n    this.state.isTransitioning = true;\n\n    // Get current and next view elements\n    const currentView = this.components.views.get(this.state.currentView);\n    const nextView = this.components.views.get(viewType);\n\n    if (!currentView || !nextView) {\n      console.error('Cannot transition: view not found');\n      this.state.isTransitioning = false;\n      return;\n    }\n\n    // Prepare next view\n    nextView.style.display = 'flex';\n    nextView.style.opacity = '0';\n    nextView.style.transform = 'translateY(20px)';\n\n    // Trigger reflow\n    void nextView.offsetWidth;\n\n    // Animate current view out\n    currentView.style.opacity = '0';\n    currentView.style.transform = 'translateY(-20px)';\n\n    // Animate next view in\n    nextView.style.opacity = '1';\n    nextView.style.transform = 'translateY(0)';\n\n    // After animation completes\n    setTimeout(() => {\n      // Hide current view\n      currentView.style.display = 'none';\n      currentView.classList.remove('active');\n\n      // Reset transforms\n      currentView.style.transform = '';\n      currentView.style.opacity = '';\n\n      // Mark next view as active\n      nextView.classList.add('active');\n\n      // Update state\n      this.state.currentView = viewType;\n      this.state.isTransitioning = false;\n\n      // If showing attempt view, update attempt counter\n      if (viewType === 'attempt') {\n        const attemptCounter = document.getElementById('current-attempt');\n        if (attemptCounter) {\n          attemptCounter.textContent = this.state.currentAttempt.toString();\n        }\n      }\n\n      // Emit view changed event\n      this.emit('view-changed', viewType);\n    }, 500); // Match the CSS transition duration\n  }\n\n  /**\n   * Set up attempt view for current attempt\n   * @param attemptNumber - Current attempt number (1-5)\n   * @param boxSize - Size of constraint box\n   */\n  public setupAttemptView(attemptNumber: number, boxSize: ConstraintBoxSize): void {\n    // Update state\n    this.state.currentAttempt = attemptNumber;\n\n    // Update constraint box size\n    this.config.constraintBoxSize = boxSize;\n    this.updateConstraintBoxSize();\n\n    // Update attempt counter\n    const attemptCounter = document.getElementById('current-attempt');\n    if (attemptCounter) {\n      attemptCounter.textContent = attemptNumber.toString();\n    }\n\n    // Update canvas dimensions\n    this.updateCanvasDimensions();\n  }\n\n  /**\n   * Show example drawing with animation\n   * @param drawing - Drawing data to display\n   */\n  public showExampleDrawing(drawing: DrawingData): void {\n    // Update configuration to reset base constraint box size\n    this.updateConfiguration();\n    // Reset any previous scaling/shrinking animations and state\n    this.cleanupAnimations();\n    // Clear any inline transforms on the constraint box\n    if (this.components.constraintBox) {\n      this.components.constraintBox.style.transform = '';\n    }\n    if (this.animation.exampleAnimationInProgress) {\n      return;\n    }\n    this.animation.exampleAnimationInProgress = true;\n\n    // Use constraint box as container for example\n    const box = this.components.constraintBox;\n    const history = this.components.historyDisplay;\n    if (!box || !history) {\n      this.animation.exampleAnimationInProgress = false;\n      return;\n    }\n\n    // Position and size constraint box as first-attempt dimensions\n    const baseBox = this.config.constraintBoxSize;\n    box.style.width = `${baseBox.width}px`;\n    box.style.height = `${baseBox.height}px`;\n    const drawingArea = box.parentElement;\n    if (drawingArea) {\n      const areaRect = drawingArea.getBoundingClientRect();\n      box.style.left = `${(areaRect.width - baseBox.width) / 2}px`;\n      box.style.top = `${(areaRect.height - baseBox.height) / 2}px`;\n    }\n\n    // Clear any existing content\n    box.innerHTML = '';\n\n    // Create canvas inside the constraint box\n    const canvas = document.createElement('canvas');\n    canvas.className = 'example-canvas';\n    canvas.style.position = 'absolute';\n    canvas.style.top = '0';\n    canvas.style.left = '0';\n    canvas.style.width = '100%';\n    canvas.style.height = '100%';\n    box.appendChild(canvas);\n\n    // Setup high-DPI dimensions\n    const rect = box.getBoundingClientRect();\n    const { pixelRatio } = this.config;\n    canvas.width = rect.width * pixelRatio;\n    canvas.height = rect.height * pixelRatio;\n\n    const context = canvas.getContext('2d');\n    if (!context) {\n      this.animation.exampleAnimationInProgress = false;\n      return;\n    }\n    context.scale(pixelRatio, pixelRatio);\n\n    // Compute drawing bounds\n    let minX = Infinity,\n      maxX = -Infinity,\n      minY = Infinity,\n      maxY = -Infinity;\n    drawing.strokes.forEach(stroke => {\n      stroke.points.forEach(pt => {\n        minX = Math.min(minX, pt.x);\n        maxX = Math.max(maxX, pt.x);\n        minY = Math.min(minY, pt.y);\n        maxY = Math.max(maxY, pt.y);\n      });\n    });\n    const originalWidth = maxX - minX;\n    const originalHeight = maxY - minY;\n    if (originalWidth === 0 || originalHeight === 0) {\n      this.animation.exampleAnimationInProgress = false;\n      return;\n    }\n\n    // Determine scale & offset\n    const canvasW = rect.width;\n    const canvasH = rect.height;\n    const scale = Math.min((canvasW / originalWidth) * 0.8, (canvasH / originalHeight) * 0.8);\n    const offsetX = (canvasW - originalWidth * scale) / 2;\n    const offsetY = (canvasH - originalHeight * scale) / 2;\n\n    // Transform all points in drawing for scaled/centered animation\n    const transformedDrawing = {\n      ...drawing,\n      strokes: drawing.strokes.map(stroke => ({\n        ...stroke,\n        points: stroke.points.map(pt => ({\n          x: offsetX + (pt.x - minX) * scale,\n          y: offsetY + (pt.y - minY) * scale,\n          timestamp: pt.timestamp,\n          ...(pt.pressure !== undefined ? { pressure: pt.pressure } : {}),\n        })),\n      })),\n    };\n\n    // Setup animator and controller\n    if (this.exampleAnimationController) {\n      this.exampleAnimationController.stop();\n    }\n    this.exampleAnimationController = new AnimationController();\n    this.exampleAnimator = new ExampleDrawingAnimator({\n      ctx: context,\n      emitter: this,\n      controller: this.exampleAnimationController,\n      pointIntervalMs: 20,\n      strokePauseMs: 200,\n    });\n\n    // Animate using the new animator\n    this.exampleAnimator.play(transformedDrawing).then(() => {\n      canvas.classList.add('animate-to-corner');\n      // Center shrink so it stays fully inside the constraint box\n      canvas.style.transformOrigin = 'center center';\n      canvas.style.transform = 'scale(0.25)';\n      // After shrink animation, remove canvas and add thumbnail to history\n      setTimeout(() => {\n        // Remove the example canvas so it no longer sits in the constraint box\n        if (canvas.parentElement === box) {\n          box.removeChild(canvas);\n        }\n\n        const exampleItem = document.createElement('div');\n        exampleItem.className = 'history-item example-item';\n        const historyCanvas = document.createElement('canvas');\n        const histRect = history.getBoundingClientRect();\n        const thumbSize = histRect.height * 0.7;\n        this.renderDrawingToCanvas(drawing, historyCanvas, thumbSize, thumbSize, pixelRatio);\n        exampleItem.appendChild(historyCanvas);\n        const label = document.createElement('div');\n        label.className = 'history-label';\n        label.textContent = 'Example';\n        exampleItem.appendChild(label);\n        history.appendChild(exampleItem);\n        this.animation.exampleAnimationInProgress = false;\n        this.emit('example-animation-complete');\n      }, 1000);\n    });\n  }\n\n  /**\n   * Helper to render drawing data to a canvas at any size\n   */\n  private renderDrawingToCanvas(\n    drawing: DrawingData,\n    canvas: HTMLCanvasElement,\n    width: number,\n    height: number,\n    pixelRatio: number\n  ): void {\n    canvas.width = width * pixelRatio;\n    canvas.height = height * pixelRatio;\n    canvas.style.width = `${width}px`;\n    canvas.style.height = `${height}px`;\n    const ctx = canvas.getContext('2d');\n    if (!ctx) {\n      return;\n    }\n    ctx.setTransform(1, 0, 0, 1, 0, 0); // Reset any transforms\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n    ctx.scale(pixelRatio, pixelRatio);\n\n    // Find bounding box\n    let minX = Number.MAX_VALUE,\n      maxX = Number.MIN_VALUE,\n      minY = Number.MAX_VALUE,\n      maxY = Number.MIN_VALUE;\n    for (const stroke of drawing.strokes) {\n      for (const point of stroke.points) {\n        minX = Math.min(minX, point.x);\n        maxX = Math.max(maxX, point.x);\n        minY = Math.min(minY, point.y);\n        maxY = Math.max(maxY, point.y);\n      }\n    }\n    const originalWidth = maxX - minX;\n    const originalHeight = maxY - minY;\n    if (originalWidth === 0 || originalHeight === 0) {\n      return;\n    }\n    const scale = Math.min((width / originalWidth) * 0.8, (height / originalHeight) * 0.8);\n    const offsetX = (width - originalWidth * scale) / 2;\n    const offsetY = (height - originalHeight * scale) / 2;\n    for (const stroke of drawing.strokes) {\n      if (stroke.points.length < 2) {\n        continue;\n      }\n      ctx.beginPath();\n      ctx.strokeStyle = stroke.color;\n      ctx.lineWidth = 3;\n      ctx.lineCap = 'round';\n      ctx.lineJoin = 'round';\n      const firstPoint = stroke.points[0];\n      ctx.moveTo(offsetX + (firstPoint.x - minX) * scale, offsetY + (firstPoint.y - minY) * scale);\n      for (let i = 1; i < stroke.points.length; i++) {\n        const point = stroke.points[i];\n        ctx.lineTo(offsetX + (point.x - minX) * scale, offsetY + (point.y - minY) * scale);\n      }\n      ctx.stroke();\n    }\n  }\n\n  /**\n   * Animate drawing to history and shrink it\n   * @param attemptNumber - Attempt number\n   * @param drawing - Drawing data for the attempt\n   */\n  public animateDrawingToHistory(attemptNumber: number, drawing: DrawingData): void {\n    if (this.animation.attemptAnimationInProgress) {\n      return;\n    }\n\n    this.animation.attemptAnimationInProgress = true;\n\n    // Take a snapshot of the current canvas\n    if (!this.components.drawingCanvas) {\n      this.animation.attemptAnimationInProgress = false;\n      return;\n    }\n\n    // Create a clone of the canvas\n    const originalCanvas = this.components.drawingCanvas;\n    const tempCanvas = document.createElement('canvas');\n    tempCanvas.width = originalCanvas.width;\n    tempCanvas.height = originalCanvas.height;\n    tempCanvas.style.width = originalCanvas.style.width;\n    tempCanvas.style.height = originalCanvas.style.height;\n    tempCanvas.style.position = 'absolute';\n    tempCanvas.style.top = '0';\n    tempCanvas.style.left = '0';\n    tempCanvas.style.zIndex = '10';\n\n    // Get context and copy content\n    const tempContext = tempCanvas.getContext('2d');\n    if (!tempContext) {\n      this.animation.attemptAnimationInProgress = false;\n      return;\n    }\n\n    tempContext.drawImage(originalCanvas, 0, 0);\n\n    // Get drawing area\n    const drawingArea = originalCanvas.parentElement;\n    if (!drawingArea) {\n      this.animation.attemptAnimationInProgress = false;\n      return;\n    }\n\n    // Add canvas to drawing area\n    drawingArea.appendChild(tempCanvas);\n\n    // Animate to history\n    setTimeout(() => {\n      // Add animation class\n      tempCanvas.classList.add('animate-to-history');\n\n      // Get history display and drawing area rectangles\n      const historyRect = this.components.historyDisplay!.getBoundingClientRect();\n      const drawingRect = drawingArea.getBoundingClientRect();\n      const drawingAreaRect = drawingArea.getBoundingClientRect();\n\n      // Determine thumbnail dimensions (70% of history height)\n      const thumbWidth = historyRect.height * 0.7;\n      const thumbHeight = historyRect.height * 0.7;\n\n      // Calculate scale to fit drawing into thumbnail\n      const scaleX = thumbWidth / drawingRect.width;\n      const scaleY = thumbHeight / drawingRect.height;\n      const scale = Math.min(scaleX, scaleY);\n\n      // Compute horizontal offset in history display for this item\n      const itemIndex = this.historyItems.length;\n      const gap = 10; // same as margin-right\n      const xInHistory = itemIndex * (thumbWidth + gap);\n\n      // Calculate translation offsets relative to drawing area container\n      const offsetX =\n        historyRect.left -\n        drawingAreaRect.left +\n        xInHistory +\n        (thumbWidth - drawingRect.width * scale) / 2;\n      const offsetY =\n        historyRect.top -\n        drawingAreaRect.top +\n        (historyRect.height - drawingRect.height * scale) / 2;\n\n      // Apply shrink-and-move animation\n      tempCanvas.style.transition = 'transform 0.8s ease-in-out';\n      tempCanvas.style.transformOrigin = 'top left';\n      tempCanvas.style.transform = `translate(${offsetX}px, ${offsetY}px) scale(${scale})`;\n\n      // After animation completes\n      setTimeout(() => {\n        // Create history item\n        const historyItem = document.createElement('div');\n        historyItem.className = 'history-item attempt-item';\n\n        // Create smaller canvas for history\n        const historyCanvas = document.createElement('canvas');\n        this.renderDrawingToCanvas(\n          drawing,\n          historyCanvas,\n          thumbWidth,\n          thumbHeight,\n          this.config.pixelRatio\n        );\n        historyItem.appendChild(historyCanvas);\n\n        // Add attempt number label\n        const label = document.createElement('div');\n        label.className = 'history-label';\n        label.textContent = `Attempt ${attemptNumber}`;\n        historyItem.appendChild(label);\n\n        // Add to history display\n        if (this.components.historyDisplay) {\n          this.components.historyDisplay.appendChild(historyItem);\n          this.historyItems.push(historyItem);\n        }\n\n        // Remove temporary canvas\n        drawingArea.removeChild(tempCanvas);\n\n        // Clear original canvas\n        const originalContext = originalCanvas.getContext('2d');\n        if (originalContext) {\n          originalContext.clearRect(0, 0, originalCanvas.width, originalCanvas.height);\n        }\n\n        // Complete animation\n        this.animation.attemptAnimationInProgress = false;\n        this.emit('attempt-animation-complete', attemptNumber);\n      }, 1000); // Animation duration\n    }, 100); // Short delay before starting animation\n  }\n\n  /**\n   * Display score results\n   * @param score - Score result to display\n   */\n  public showScoreScreen(score: ScoreResult): void {\n    // Switch to score view\n    this.showView('score');\n\n    // Update score display elements\n    const scoreView = this.components.views.get('score');\n    if (!scoreView) {\n      return;\n    }\n\n    // Update total score\n    const scoreNumber = scoreView.querySelector('.score-number');\n    if (scoreNumber) {\n      scoreNumber.textContent = score.totalScore.toString();\n    }\n\n    // Update feedback message\n    const feedbackMessage = scoreView.querySelector('.feedback-message');\n    if (feedbackMessage) {\n      feedbackMessage.textContent = score.feedback;\n    }\n\n    // Clear existing stars\n    const starContainers = scoreView.querySelectorAll('.stars');\n    starContainers.forEach(container => {\n      container.innerHTML = '';\n    });\n\n    // Animate stars with a delay between categories\n    setTimeout(() => {\n      this.displayStars('.accuracy-stars', score.categories.accuracy);\n\n      setTimeout(() => {\n        this.displayStars('.strokes-stars', score.categories.strokes);\n\n        setTimeout(() => {\n          this.displayStars('.timing-stars', score.categories.timing);\n\n          setTimeout(() => {\n            this.displayStars('.overall-stars', score.categories.overall);\n          }, 300);\n        }, 300);\n      }, 300);\n    }, 500);\n  }\n  /**\n   * Handle exercise selection from the list\n   * @param exercise - Selected exercise\n   */\n  private handleExerciseSelection(exercise: Exercise): void {\n    // Emit event for exercise selection\n    this.emit('exercise-selected', exercise);\n  }\n\n  /**\n   * Clean up any ongoing animations\n   */\n  public cleanupAnimations(): void {\n    // Reset animation flags\n    this.animation.exampleAnimationInProgress = false;\n    this.animation.attemptAnimationInProgress = false;\n    this.animation.scoreAnimationInProgress = false;\n\n    // Remove any temporary animation elements\n    if (this.components.container) {\n      const tempElements = this.components.container.querySelectorAll(\n        '.animate-to-corner, .animate-to-history'\n      );\n      tempElements.forEach(element => {\n        if (element.parentElement) {\n          element.parentElement.removeChild(element);\n        }\n      });\n    }\n  }\n\n  /**\n   * Reset the history display\n   */\n  public resetHistoryDisplay(): void {\n    if (!this.components.historyDisplay) {\n      return;\n    }\n\n    // Clear the history display\n    this.components.historyDisplay.innerHTML = '';\n\n    // Reset history items array\n    this.historyItems = [];\n  }\n\n  /**\n   * Update the attempt counter\n   * @param attemptNumber - Current attempt number\n   */\n  public updateAttemptCounter(attemptNumber: number): void {\n    // Update state\n    this.state.currentAttempt = attemptNumber;\n\n    // Update DOM element\n    const attemptCounter = document.getElementById('current-attempt');\n    if (attemptCounter) {\n      attemptCounter.textContent = attemptNumber.toString();\n    }\n  }\n\n  /**\n   * Display a confirmation message when exercise is saved\n   */\n  public showExerciseSavedConfirmation(): void {\n    if (!this.components.container) {\n      return;\n    }\n\n    // Create confirmation overlay\n    const confirmationOverlay = document.createElement('div');\n    confirmationOverlay.className = 'confirmation-overlay';\n    confirmationOverlay.innerHTML = `\n      <div class=\"confirmation-content\">\n        <div class=\"confirmation-icon\">✓</div>\n        <div class=\"confirmation-message\">Exercise Saved!</div>\n      </div>\n    `;\n\n    // Add to container\n    this.components.container.appendChild(confirmationOverlay);\n\n    // Force reflow for animation\n    void confirmationOverlay.offsetWidth;\n\n    // Show with fade in\n    confirmationOverlay.style.opacity = '1';\n\n    // Remove after animation\n    setTimeout(() => {\n      confirmationOverlay.style.opacity = '0';\n\n      setTimeout(() => {\n        if (confirmationOverlay.parentElement) {\n          confirmationOverlay.parentElement.removeChild(confirmationOverlay);\n        }\n      }, 300);\n    }, 1500);\n  }\n\n  /**\n   * Display stars for a category with animation\n   * @param selector - CSS selector for star container\n   * @param starCount - Number of stars (1-5)\n   */\n  private displayStars(selector: string, starCount: number): void {\n    const container = document.querySelector(selector) as HTMLElement;\n    if (!container) {\n      return;\n    }\n\n    // Clamp star count to valid range\n    const validStarCount = Math.max(1, Math.min(5, starCount));\n\n    // Create stars\n    for (let i = 0; i < 5; i++) {\n      const star = document.createElement('div');\n      star.className = i < validStarCount ? 'star star-filled' : 'star star-empty';\n\n      // Add with delay for animation\n      setTimeout(() => {\n        container.appendChild(star);\n\n        // Trigger animation after a small delay\n        setTimeout(() => {\n          star.classList.add('star-animated');\n\n          // Emit event for audio feedback\n          if (i < validStarCount) {\n            this.emit('star-added', i + 1);\n          }\n        }, 50);\n      }, i * 150);\n    }\n  }\n\n  /**\n   * Calculate constraint box size based on attempt number\n   * @param attemptNumber - Current attempt number (1-5)\n   * @returns Constraint box size\n   */\n  private calculateConstraintBoxSize(attemptNumber: number): ConstraintBoxSize {\n    // Base size from configuration\n    const baseSize = this.config.constraintBoxSize;\n\n    // Reduce size with each attempt\n    // Start with 100% of base size and reduce by 15% for each attempt\n    const scaleFactor = Math.max(0.4, 1 - (attemptNumber - 1) * 0.15);\n\n    return {\n      width: baseSize.width * scaleFactor,\n      height: baseSize.height * scaleFactor,\n    };\n  }\n\n  /**\n   * Set loading state\n   * @param message - Optional loading message\n   */\n  public setLoading(message: string = 'Loading...'): void {\n    if (!this.components.container) {\n      return;\n    }\n\n    // Don't add multiple loading overlays\n    this.clearLoading();\n\n    // Update state\n    this.state.isLoading = true;\n\n    // Create loading overlay\n    const loadingOverlay = document.createElement('div');\n    loadingOverlay.className = 'loading-overlay';\n    loadingOverlay.innerHTML = `\n      <div class=\"loading-spinner\"></div>\n      <div class=\"loading-message\">${message}</div>\n    `;\n\n    // Add to container\n    this.components.container.appendChild(loadingOverlay);\n\n    // Force reflow for animation\n    void loadingOverlay.offsetWidth;\n\n    // Show with fade in\n    (loadingOverlay as HTMLElement).style.opacity = '1';\n  }\n\n  /**\n   * Clear loading state\n   */\n  public clearLoading(): void {\n    if (!this.components.container) {\n      return;\n    }\n\n    // Update state\n    this.state.isLoading = false;\n\n    // Find existing loading overlay\n    const loadingOverlay = this.components.container.querySelector('.loading-overlay');\n    if (!loadingOverlay) {\n      return;\n    }\n\n    // Fade out\n    (loadingOverlay as HTMLElement).style.opacity = '0';\n\n    // Remove after animation\n    setTimeout(() => {\n      if (loadingOverlay.parentElement) {\n        loadingOverlay.parentElement.removeChild(loadingOverlay);\n      }\n    }, 300);\n  }\n\n  /**\n   * Show error message\n   * @param message - Error message\n   */\n  public showError(message: string): void {\n    if (!this.components.container) {\n      return;\n    }\n\n    // Update state\n    this.state.hasError = true;\n    this.state.errorMessage = message;\n\n    // Create error overlay if it doesn't exist\n    let errorOverlay = this.components.container.querySelector('.error-overlay');\n\n    if (!errorOverlay) {\n      errorOverlay = document.createElement('div');\n      errorOverlay.className = 'error-overlay';\n\n      // Create error content\n      errorOverlay.innerHTML = `\n        <div class=\"error-content\">\n          <div class=\"error-icon\">⚠️</div>\n          <div class=\"error-message\">${message}</div>\n          <button class=\"btn btn-primary error-button\">OK</button>\n        </div>\n      `;\n\n      // Add event listener for OK button\n      const okButton = errorOverlay.querySelector('.error-button');\n      if (okButton) {\n        okButton.addEventListener('click', () => {\n          this.clearError();\n        });\n      }\n\n      // Add to container\n      this.components.container.appendChild(errorOverlay);\n\n      // Force reflow for animation\n      void (errorOverlay as HTMLElement).offsetWidth;\n\n      // Show with fade in\n      (errorOverlay as HTMLElement).style.opacity = '1';\n    } else {\n      // Update existing error message\n      const errorMessage = errorOverlay.querySelector('.error-message');\n      if (errorMessage) {\n        errorMessage.textContent = message;\n      }\n    }\n\n    // Emit error event\n    this.emit('error-shown', message);\n  }\n\n  /**\n   * Clear error message\n   */\n  public clearError(): void {\n    if (!this.components.container) {\n      return;\n    }\n\n    // Update state\n    this.state.hasError = false;\n    this.state.errorMessage = '';\n\n    // Find existing error overlay\n    const errorOverlay = this.components.container.querySelector('.error-overlay');\n    if (!errorOverlay) {\n      return;\n    }\n\n    // Fade out\n    (errorOverlay as HTMLElement).style.opacity = '0';\n\n    // Remove after animation\n    setTimeout(() => {\n      if (errorOverlay.parentElement) {\n        errorOverlay.parentElement.removeChild(errorOverlay);\n      }\n    }, 300);\n\n    // Emit error cleared event\n    this.emit('error-cleared');\n  }\n\n  /**\n   * Update exercise list\n   * @param exercises - Available exercises\n   * @param thumbnails - Map of exercise ID to thumbnail URL\n   */\n  public updateExerciseList(\n    exercises: Exercise[],\n    thumbnails: { [exerciseId: string]: string }\n  ): void {\n    console.log(`UIManager: updateExerciseList with ${exercises.length} templates`);\n    // Get the exercise list container\n    const exerciseListView = this.components.views.get('exercise-list');\n    if (!exerciseListView) {\n      return;\n    }\n\n    const exerciseList = exerciseListView.querySelector('.exercise-list');\n    if (!exerciseList) {\n      return;\n    }\n\n    // Clear existing items\n    exerciseList.innerHTML = '';\n\n    if (exercises.length === 0) {\n      // Show no exercises message\n      const noExercises = document.createElement('div');\n      noExercises.className = 'no-exercises-message';\n      noExercises.textContent = 'No templates found. Create a new template first.';\n      exerciseList.appendChild(noExercises);\n      return;\n    }\n\n    // Create exercise items\n    exercises.forEach(exercise => {\n      const exerciseItem = document.createElement('div');\n      exerciseItem.className = 'exercise-item';\n      exerciseItem.dataset.id = exercise.id;\n\n      // Create thumbnail container\n      const thumbnailContainer = document.createElement('div');\n      thumbnailContainer.className = 'exercise-thumbnail';\n\n      // Add thumbnail if available\n      if (thumbnails[exercise.id]) {\n        const img = document.createElement('img');\n        img.src = thumbnails[exercise.id];\n        img.alt = exercise.name;\n        thumbnailContainer.appendChild(img);\n      } else {\n        // Default placeholder\n        thumbnailContainer.innerHTML = '<div class=\"thumbnail-placeholder\">?</div>';\n      }\n\n      // Create exercise details\n      const details = document.createElement('div');\n      details.className = 'exercise-details';\n\n      // Exercise name\n      const name = document.createElement('div');\n      name.className = 'exercise-name';\n      name.textContent = exercise.name;\n      details.appendChild(name);\n\n      // Exercise date\n      const date = document.createElement('div');\n      date.className = 'exercise-date';\n      date.textContent = exercise.createdAt.toLocaleDateString();\n      details.appendChild(date);\n\n      // High score if available\n      if (exercise.highestScore) {\n        const score = document.createElement('div');\n        score.className = 'exercise-score';\n\n        // Create star container\n        const stars = document.createElement('div');\n        stars.className = 'exercise-stars';\n\n        // Add stars based on overall rating\n        const starCount = exercise.highestScore.categories.overall;\n        for (let i = 0; i < 5; i++) {\n          const star = document.createElement('span');\n          star.className = i < starCount ? 'star-mini star-filled' : 'star-mini star-empty';\n          stars.appendChild(star);\n        }\n\n        score.appendChild(stars);\n        details.appendChild(score);\n      }\n\n      // Assemble exercise item\n      exerciseItem.appendChild(thumbnailContainer);\n      exerciseItem.appendChild(details);\n\n      // Add click handler\n      exerciseItem.addEventListener('click', () => {\n        this.handleExerciseSelection(exercise);\n      });\n\n      // Add to list\n      exerciseList.appendChild(exerciseItem);\n    });\n  }\n}\n","/**\n * Handwriting Exercise Game\n * Main entry point for the application\n */\n\nimport { GameManager } from './core/GameManager';\nimport { DrawingManager } from './core/DrawingManager';\nimport { ScoreManager } from './core/ScoreManager';\nimport { StorageManager } from './services/StorageManager';\nimport { AudioManager } from './services/AudioManager';\nimport { UIManager } from './services/UIManager';\n\n/**\n * Initialize the application\n */\nasync function init(): Promise<void> {\n  console.log('Initializing handwriting exercise game...');\n\n  try {\n    // Show loading screen\n    showLoadingScreen();\n\n    // Get container element\n    const gameContainer = document.getElementById('game-container');\n    if (!gameContainer) {\n      throw new Error('Game container element not found');\n    }\n\n    // Initialize managers\n    const storageManager = new StorageManager();\n    const audioManager = new AudioManager();\n    const drawingManager = new DrawingManager();\n    const scoreManager = new ScoreManager();\n    const uiManager = new UIManager();\n\n    // Initialize storage first to load any saved data\n    await storageManager.initialize();\n    console.log('Storage manager initialized');\n\n    // Initialize UI\n    uiManager.initialize(gameContainer);\n    console.log('UI manager initialized');\n\n    // Initialize drawing\n    drawingManager.initialize();\n    console.log('Drawing manager initialized');\n\n    // Initialize scoring\n    scoreManager.initialize();\n    console.log('Score manager initialized');\n\n    // Initialize audio manager\n    await audioManager.initialize();\n    console.log('Audio manager initialized');\n\n    // Setup tablet-specific behaviors\n    setupTabletBehavior();\n\n    // Instantiate GameManager and wire up all game flows through a single coordinator\n    const gameManager = new GameManager({\n      storageManager,\n      audioManager,\n      uiManager,\n      drawingManager,\n      scoreManager,\n      container: gameContainer,\n    });\n    await gameManager.initialize();\n    console.log('Game manager initialized');\n\n    // Hide loading screen and show welcome view (UIManager does this by default)\n    hideLoadingScreen();\n    console.log('Main: init complete, explicitly showing welcome view');\n    gameManager.showWelcomeScreen();\n    console.log('Main: welcome view should now be visible and on top');\n  } catch (error) {\n    console.error('Failed to initialize application:', error);\n    showErrorScreen(error);\n  }\n}\n\n/**\n * Show loading screen\n */\nfunction showLoadingScreen(): void {\n  console.log('Main: showLoadingScreen');\n  const loadingScreen = document.getElementById('loading-screen');\n  if (loadingScreen) {\n    loadingScreen.style.display = 'flex';\n    loadingScreen.style.opacity = '1';\n  }\n}\n\n/**\n * Hide loading screen with fade-out animation\n */\nfunction hideLoadingScreen(): void {\n  console.log('Main: hideLoadingScreen');\n  const loadingScreen = document.getElementById('loading-screen');\n  if (loadingScreen) {\n    loadingScreen.classList.add('fade-out');\n\n    // Remove after animation\n    setTimeout(() => {\n      loadingScreen.style.display = 'none';\n      console.log('Main: loading screen hidden, welcome view should be visible');\n    }, 500);\n  }\n}\n\n/**\n * Set up tablet-specific behaviors\n */\nfunction setupTabletBehavior(): void {\n  // Prevent default touch behaviors on canvas\n  document.addEventListener(\n    'touchstart',\n    event => {\n      if (event.target instanceof HTMLCanvasElement) {\n        event.preventDefault();\n      }\n    },\n    { passive: false }\n  );\n\n  // Prevent scrolling when touching the canvas\n  document.addEventListener(\n    'touchmove',\n    event => {\n      if (event.target instanceof HTMLCanvasElement) {\n        event.preventDefault();\n      }\n    },\n    { passive: false }\n  );\n\n  // Prevent context menu on long-press\n  document.addEventListener('contextmenu', event => {\n    event.preventDefault();\n    return false;\n  });\n\n  // Handle visibility changes (app going to background)\n  document.addEventListener('visibilitychange', () => {\n    if (document.hidden) {\n      // Pause game or mute audio when app goes to background\n      console.log('App went to background');\n    } else {\n      // Resume game when app comes back to foreground\n      console.log('App came to foreground');\n    }\n  });\n}\n\n/**\n * Show error screen when initialization fails\n */\nfunction showErrorScreen(error: unknown): void {\n  const errorMessage = error instanceof Error ? error.message : 'Unknown error occurred';\n\n  const container = document.getElementById('app');\n  if (!container) {\n    return;\n  }\n\n  // Hide loading screen\n  const loadingScreen = document.getElementById('loading-screen');\n  if (loadingScreen) {\n    loadingScreen.style.display = 'none';\n  }\n\n  // Create error screen\n  const errorScreen = document.createElement('div');\n  errorScreen.className = 'error-screen';\n  errorScreen.innerHTML = `\n    <div class=\"error-content\">\n      <h2>Oops! Something went wrong</h2>\n      <p>${errorMessage}</p>\n      <button class=\"btn btn-primary\" onclick=\"location.reload()\">Try Again</button>\n    </div>\n  `;\n\n  container.appendChild(errorScreen);\n}\n\n// Initialize when DOM is fully loaded\ndocument.addEventListener('DOMContentLoaded', init);\n"],"names":["AnimationController","tasks","Map","running","lastTimestamp","rafId","idCounter","schedule","callback","id","this","set","start","cancel","handle","delete","size","stop","performance","now","requestAnimationFrame","loop","cancelAnimationFrame","timestamp","dt","task","Array","from","entries","ExampleDrawingAnimator","ctx","emitter","controller","pointIntervalMs","strokePauseMs","_currentTaskHandle","currentTaskHandle","value","constructor","options","play","drawing","strokes","length","Error","s","stroke","animateStroke","pause","Promise","resolve","points","emit","i","elapsed","beginPath","strokeStyle","color","lineWidth","lineCap","lineJoin","first","rest","moveTo","x","y","pt","lineTo","ms","UIManager","EventEmitter","state","currentView","currentAttempt","isTransitioning","isLoading","hasError","errorMessage","config","isMobile","isLandscape","viewportWidth","viewportHeight","pixelRatio","historyHeight","constraintBoxSize","width","height","animation","exampleAnimationInProgress","attemptAnimationInProgress","scoreAnimationInProgress","components","container","views","drawingCanvas","constraintBox","historyDisplay","buttons","historyItems","exampleAnimationController","exampleAnimator","initialize","console","log","createViewElements","keys","setupEventListeners","updateConfiguration","showView","listView","get","style","display","classList","remove","innerHTML","createWelcomeView","createAttemptView","createCreateExerciseView","createScoreView","createExerciseListView","forEach","view","appendChild","document","createElement","className","createButton","querySelector","loadButton","addEventListener","doneButton","cancelButton","saveButton","nameInput","name","trim","tryAgainButton","menuButton","backButton","window","handleResize","bind","handleOrientationChange","updateLayout","setTimeout","innerWidth","innerHeight","devicePixelRatio","baseSize","Math","min","updateCanvasDimensions","updateConstraintBoxSize","updateHistoryDisplay","canvas","parentElement","rect","getBoundingClientRect","box","calculateConstraintBoxSize","drawingArea","areaRect","left","top","viewType","v","type","offsetWidth","add","attemptCounter","getElementById","textContent","toString","error","transitionToView","nextView","opacity","transform","setupAttemptView","attemptNumber","boxSize","showExampleDrawing","cleanupAnimations","history","baseBox","position","context","getContext","scale","minX","Infinity","maxX","minY","maxY","max","originalWidth","originalHeight","canvasW","canvasH","offsetX","offsetY","transformedDrawing","map","pressure","then","transformOrigin","removeChild","exampleItem","historyCanvas","thumbSize","renderDrawingToCanvas","label","setTransform","clearRect","Number","MAX_VALUE","MIN_VALUE","point","firstPoint","animateDrawingToHistory","originalCanvas","tempCanvas","zIndex","tempContext","drawImage","historyRect","drawingRect","drawingAreaRect","thumbWidth","thumbHeight","scaleX","scaleY","xInHistory","transition","historyItem","push","originalContext","showScoreScreen","score","scoreView","scoreNumber","totalScore","feedbackMessage","feedback","querySelectorAll","displayStars","categories","accuracy","timing","overall","handleExerciseSelection","exercise","element","resetHistoryDisplay","updateAttemptCounter","showExerciseSavedConfirmation","confirmationOverlay","selector","starCount","validStarCount","star","scaleFactor","setLoading","message","clearLoading","loadingOverlay","showError","errorOverlay","okButton","clearError","updateExerciseList","exercises","thumbnails","exerciseListView","exerciseList","noExercises","exerciseItem","dataset","thumbnailContainer","img","src","alt","details","date","createdAt","toLocaleDateString","highestScore","stars","async","loadingScreen","showLoadingScreen","gameContainer","storageManager","StorageManager","audioManager","AudioManager","drawingManager","DrawingManager","scoreManager","ScoreManager","uiManager","event","target","HTMLCanvasElement","preventDefault","passive","hidden","gameManager","GameManager","hideLoadingScreen","showWelcomeScreen","errorScreen","showErrorScreen"],"mappings":"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"}