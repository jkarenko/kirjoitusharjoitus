{"version":3,"file":"index-Ceb18TUz.js","sources":["../../src/services/UIManager.ts","../../src/main.ts"],"sourcesContent":["/**\n * UIManager class\n * Handles the game's user interface and state management\n */\n\nimport { EventEmitter } from '../utils/EventEmitter';\nimport { ViewType, Exercise, DrawingData, ScoreResult, ConstraintBoxSize } from '../types/Exercise';\n\n/**\n * Game UI state\n */\ninterface GameState {\n  currentView: ViewType;\n  currentAttempt: number;\n  isTransitioning: boolean;\n  isLoading: boolean;\n  hasError: boolean;\n  errorMessage: string;\n}\n\n/**\n * UI configuration for responsive layout\n */\ninterface UIConfiguration {\n  isMobile: boolean;\n  isLandscape: boolean;\n  viewportWidth: number;\n  viewportHeight: number;\n  pixelRatio: number;\n  historyHeight: number;\n  constraintBoxSize: ConstraintBoxSize;\n}\n\n/**\n * Animation state\n */\ninterface AnimationState {\n  exampleAnimationInProgress: boolean;\n  attemptAnimationInProgress: boolean;\n  scoreAnimationInProgress: boolean;\n}\n\n/**\n * View components container\n */\ninterface ViewComponents {\n  container: HTMLElement | null;\n  views: Map<ViewType, HTMLElement>;\n  drawingCanvas: HTMLCanvasElement | null;\n  constraintBox: HTMLElement | null;\n  historyDisplay: HTMLElement | null;\n  buttons: Map<string, HTMLButtonElement>;\n}\n\nexport class UIManager extends EventEmitter {\n  // State\n  private state: GameState = {\n    currentView: 'welcome',\n    currentAttempt: 0,\n    isTransitioning: false,\n    isLoading: false,\n    hasError: false,\n    errorMessage: '',\n  };\n\n  // Configuration\n  private config: UIConfiguration = {\n    isMobile: false,\n    isLandscape: false,\n    viewportWidth: 0,\n    viewportHeight: 0,\n    pixelRatio: 1,\n    historyHeight: 120,\n    constraintBoxSize: { width: 300, height: 300 },\n  };\n\n  // Animation state\n  private animation: AnimationState = {\n    exampleAnimationInProgress: false,\n    attemptAnimationInProgress: false,\n    scoreAnimationInProgress: false,\n  };\n\n  // UI Components\n  private components: ViewComponents = {\n    container: null,\n    views: new Map(),\n    drawingCanvas: null,\n    constraintBox: null,\n    historyDisplay: null,\n    buttons: new Map(),\n  };\n\n  // History of drawing attempts\n  private historyItems: HTMLElement[] = [];\n\n  /**\n   * Initialize the UI manager\n   * @param container - Container element for the game\n   */\n  public initialize(container: HTMLElement): void {\n    console.log('UIManager: initialize - starting');\n    this.components.container = container;\n\n    // Create view elements\n    console.log('UIManager: initialize - creating view elements');\n    this.createViewElements();\n    console.log('UIManager: initialize - created views:', Array.from(this.components.views.keys()));\n\n    // Set up event listeners\n    this.setupEventListeners();\n\n    // Configure for current device\n    this.updateConfiguration();\n\n    // Reset currentView so that showView('welcome') will always execute\n    (this.state as GameState).currentView = 'welcome' as ViewType;\n    this.showView('welcome');\n    console.log('UIManager: initialize - forcibly hiding exercise-list view');\n    const listView = this.components.views.get('exercise-list');\n    if (listView) {\n      listView.style.display = 'none';\n      listView.classList.remove('active');\n    }\n\n    // Emit initialized event\n    this.emit('ui-initialized');\n  }\n\n  /**\n   * Create view elements for each game view\n   */\n  private createViewElements(): void {\n    console.log('UIManager: createViewElements - started');\n    if (!this.components.container) return;\n\n    // Clear container\n    this.components.container.innerHTML = '';\n\n    // Create views\n    console.log('UIManager: createViewElements - creating welcome view');\n    this.createWelcomeView();\n    console.log('UIManager: createViewElements - creating attempt view');\n    this.createAttemptView();\n    console.log('UIManager: createViewElements - creating create-exercise view');\n    this.createCreateExerciseView();\n    console.log('UIManager: createViewElements - creating score view');\n    this.createScoreView();\n    console.log('UIManager: createViewElements - creating exercise-list view');\n    this.createExerciseListView();\n\n    // Append views to container\n    this.components.views.forEach(view => {\n      this.components.container?.appendChild(view);\n    });\n    console.log('UIManager: createViewElements - appended all views');\n  }\n\n  /**\n   * Create welcome view\n   */\n  private createWelcomeView(): void {\n    const view = document.createElement('div');\n    view.className = 'view welcome-view';\n    view.innerHTML = `\n      <div class=\"welcome-content\">\n        <h1>Handwriting Exercise</h1>\n        <p>Practice your handwriting skills</p>\n        <div class=\"button-container\">\n          <button class=\"btn btn-primary\" id=\"btn-create-template\">Create New Template</button>\n          <button class=\"btn btn-secondary\" id=\"btn-load-template\">Load Saved Template</button>\n        </div>\n      </div>\n    `;\n\n    this.components.views.set('welcome', view);\n\n    // Add button references\n    const createButton = view.querySelector('#btn-create-template') as HTMLButtonElement;\n    const loadButton = view.querySelector('#btn-load-template') as HTMLButtonElement;\n\n    if (createButton) {\n      this.components.buttons.set('create-template', createButton);\n      createButton.addEventListener('click', () => {\n        this.emit('create-template-clicked');\n      });\n    }\n\n    if (loadButton) {\n      this.components.buttons.set('load-template', loadButton);\n      loadButton.addEventListener('click', () => {\n        this.emit('load-template-clicked');\n      });\n    }\n  }\n\n  /**\n   * Create attempt view for drawing practice\n   */\n  private createAttemptView(): void {\n    const view = document.createElement('div');\n    view.className = 'view attempt-view';\n    view.innerHTML = `\n      <div class=\"history-display\"></div>\n      <div class=\"drawing-area\">\n        <div class=\"example-display\">\n          <div class=\"example-container\"></div>\n        </div>\n        <div class=\"constraint-box\"></div>\n        <canvas class=\"drawing-canvas\"></canvas>\n      </div>\n      <div class=\"controls\">\n        <button class=\"btn btn-done\" id=\"btn-done\">Done</button>\n      </div>\n      <div class=\"attempt-info\">\n        <div class=\"attempt-counter\">Attempt <span id=\"current-attempt\">1</span>/5</div>\n      </div>\n    `;\n\n    this.components.views.set('attempt', view);\n\n    // Store references to important elements\n    this.components.historyDisplay = view.querySelector('.history-display');\n    this.components.drawingCanvas = view.querySelector('.drawing-canvas');\n    this.components.constraintBox = view.querySelector('.constraint-box');\n\n    // Add button references\n    const doneButton = view.querySelector('#btn-done') as HTMLButtonElement;\n    if (doneButton) {\n      this.components.buttons.set('done', doneButton);\n      doneButton.addEventListener('click', () => {\n        this.emit('done-button-clicked');\n      });\n    }\n  }\n\n  /**\n   * Create exercise creation view\n   */\n  private createCreateExerciseView(): void {\n    const view = document.createElement('div');\n    view.className = 'view create-exercise-view';\n    view.innerHTML = `\n      <div class=\"create-exercise-content\">\n        <h2>Create New Exercise</h2>\n        <p>Draw an example for the child to practice</p>\n        <div class=\"drawing-container\">\n          <canvas class=\"drawing-canvas\"></canvas>\n        </div>\n        <div class=\"exercise-form\">\n          <div class=\"form-group\">\n            <label for=\"exercise-name\">Exercise Name:</label>\n            <input type=\"text\" id=\"exercise-name\" placeholder=\"Enter a name for this exercise\">\n          </div>\n        </div>\n        <div class=\"controls\">\n          <button class=\"btn btn-secondary\" id=\"btn-cancel-exercise\">Cancel</button>\n          <button class=\"btn btn-primary\" id=\"btn-save-exercise\">Save Exercise</button>\n        </div>\n      </div>\n    `;\n\n    this.components.views.set('create-exercise', view);\n\n    // Add button references\n    const cancelButton = view.querySelector('#btn-cancel-exercise') as HTMLButtonElement;\n    const saveButton = view.querySelector('#btn-save-exercise') as HTMLButtonElement;\n\n    if (cancelButton) {\n      this.components.buttons.set('cancel-exercise', cancelButton);\n      cancelButton.addEventListener('click', () => {\n        this.emit('cancel-exercise-clicked');\n      });\n    }\n\n    if (saveButton) {\n      this.components.buttons.set('save-exercise', saveButton);\n      saveButton.addEventListener('click', () => {\n        const nameInput = view.querySelector('#exercise-name') as HTMLInputElement;\n        const name = nameInput?.value.trim() || 'Untitled Exercise';\n        this.emit('save-exercise-clicked', { name });\n      });\n    }\n  }\n\n  /**\n   * Create score view\n   */\n  private createScoreView(): void {\n    const view = document.createElement('div');\n    view.className = 'view score-view';\n    view.innerHTML = `\n      <div class=\"score-content\">\n        <h2>Great Job!</h2>\n        <div class=\"score-display\">\n          <div class=\"total-score\">\n            <span class=\"score-number\">0</span>/100\n          </div>\n          <div class=\"feedback-message\">\n            Well done! Keep practicing!\n          </div>\n          <div class=\"star-ratings\">\n            <div class=\"rating-category\">\n              <div class=\"category-name\">Accuracy</div>\n              <div class=\"stars accuracy-stars\"></div>\n            </div>\n            <div class=\"rating-category\">\n              <div class=\"category-name\">Strokes</div>\n              <div class=\"stars strokes-stars\"></div>\n            </div>\n            <div class=\"rating-category\">\n              <div class=\"category-name\">Timing</div>\n              <div class=\"stars timing-stars\"></div>\n            </div>\n            <div class=\"rating-category\">\n              <div class=\"category-name\">Overall</div>\n              <div class=\"stars overall-stars\"></div>\n            </div>\n          </div>\n        </div>\n        <div class=\"controls\">\n          <button class=\"btn btn-secondary\" id=\"btn-try-again\">Try Again</button>\n          <button class=\"btn btn-primary\" id=\"btn-back-to-menu\">Back to Menu</button>\n        </div>\n      </div>\n    `;\n\n    this.components.views.set('score', view);\n\n    // Add button references\n    const tryAgainButton = view.querySelector('#btn-try-again') as HTMLButtonElement;\n    const menuButton = view.querySelector('#btn-back-to-menu') as HTMLButtonElement;\n\n    if (tryAgainButton) {\n      this.components.buttons.set('try-again', tryAgainButton);\n      tryAgainButton.addEventListener('click', () => {\n        this.emit('try-again-clicked');\n      });\n    }\n\n    if (menuButton) {\n      this.components.buttons.set('back-to-menu', menuButton);\n      menuButton.addEventListener('click', () => {\n        this.emit('back-to-menu-clicked');\n      });\n    }\n  }\n\n  /**\n   * Create exercise list view\n   */\n  private createExerciseListView(): void {\n    const view = document.createElement('div');\n    view.className = 'view exercise-list-view';\n    view.style.display = 'none';\n    view.innerHTML = `\n      <div class=\"exercise-list-content\">\n        <h2>Load Saved Template</h2>\n        <div class=\"exercise-list\">\n          <!-- Exercise items will be inserted dynamically -->\n        </div>\n        <div class=\"controls\">\n          <button class=\"btn btn-secondary\" id=\"btn-back\">Back</button>\n        </div>\n      </div>\n    `;\n\n    this.components.views.set('exercise-list', view);\n\n    // Add button references\n    const backButton = view.querySelector('#btn-back') as HTMLButtonElement;\n\n    if (backButton) {\n      this.components.buttons.set('back', backButton);\n      backButton.addEventListener('click', () => {\n        this.emit('back-clicked');\n      });\n    }\n  }\n\n  /**\n   * Set up event listeners\n   */\n  private setupEventListeners(): void {\n    // Window resize\n    window.addEventListener('resize', this.handleResize.bind(this));\n\n    // Device orientation change\n    window.addEventListener('orientationchange', this.handleOrientationChange.bind(this));\n  }\n\n  /**\n   * Handle window resize\n   */\n  private handleResize(): void {\n    this.updateConfiguration();\n    this.updateLayout();\n  }\n\n  /**\n   * Handle orientation change\n   */\n  private handleOrientationChange(): void {\n    setTimeout(() => {\n      this.updateConfiguration();\n      this.updateLayout();\n    }, 300); // Slight delay to ensure dimensions are updated\n  }\n\n  /**\n   * Update configuration based on current window/device\n   */\n  private updateConfiguration(): void {\n    const width = window.innerWidth;\n    const height = window.innerHeight;\n\n    this.config.viewportWidth = width;\n    this.config.viewportHeight = height;\n    this.config.isLandscape = width > height;\n    this.config.isMobile = width < 768;\n    this.config.pixelRatio = window.devicePixelRatio || 1;\n    this.config.historyHeight = this.config.isMobile ? 100 : 120;\n\n    // Update constraint box size based on viewport\n    const minDimension = Math.min(width, height);\n    const baseSize = minDimension * 0.6; // 60% of smaller dimension\n\n    this.config.constraintBoxSize = {\n      width: baseSize,\n      height: baseSize,\n    };\n  }\n\n  /**\n   * Update layout based on current configuration\n   */\n  private updateLayout(): void {\n    // Update drawing canvas dimensions\n    this.updateCanvasDimensions();\n\n    // Update constraint box size\n    this.updateConstraintBoxSize();\n\n    // Update history display\n    this.updateHistoryDisplay();\n  }\n\n  /**\n   * Update canvas dimensions to match device pixel ratio\n   */\n  private updateCanvasDimensions(): void {\n    if (!this.components.drawingCanvas) return;\n\n    const canvas = this.components.drawingCanvas;\n    const container = canvas.parentElement;\n\n    if (!container) return;\n\n    // Get container dimensions in CSS pixels\n    const rect = container.getBoundingClientRect();\n    const dpr = this.config.pixelRatio;\n\n    // Set canvas dimensions in device pixels\n    canvas.width = Math.round(rect.width * dpr);\n    canvas.height = Math.round(rect.height * dpr);\n\n    // Set display size in CSS pixels\n    canvas.style.width = `${rect.width}px`;\n    canvas.style.height = `${rect.height}px`;\n\n    // Scale context\n    const ctx = canvas.getContext('2d');\n    if (ctx) {\n      ctx.setTransform(1, 0, 0, 1, 0, 0); // Reset\n      ctx.scale(dpr, dpr);\n    }\n  }\n\n  /**\n   * Update constraint box size based on current attempt\n   */\n  private updateConstraintBoxSize(): void {\n    if (!this.components.constraintBox) return;\n\n    const box = this.components.constraintBox;\n    const size = this.calculateConstraintBoxSize(this.state.currentAttempt);\n\n    // Set size in CSS pixels\n    box.style.width = `${size.width}px`;\n    box.style.height = `${size.height}px`;\n\n    // Center the box in the drawing area (CSS pixels)\n    const drawingArea = box.parentElement;\n    if (drawingArea) {\n      const areaRect = drawingArea.getBoundingClientRect();\n      box.style.left = `${(areaRect.width - size.width) / 2}px`;\n      box.style.top = `${(areaRect.height - size.height) / 2}px`;\n    }\n  }\n\n  /**\n   * Update history display area\n   */\n  private updateHistoryDisplay(): void {\n    if (!this.components.historyDisplay) return;\n\n    // Set height based on configuration\n    this.components.historyDisplay.style.height = `${this.config.historyHeight}px`;\n  }\n\n  /**\n   * Show a specific view\n   * @param viewType - Type of view to show\n   */\n  public showView(viewType: ViewType): void {\n    console.log(`UIManager: showView called with viewType='${viewType}'`);\n    // Don't change views during transition\n    if (this.state.isTransitioning) return;\n\n    // Get view element\n    const view = this.components.views.get(viewType);\n\n    if (!view) {\n      console.error(`View not found: ${viewType}`);\n      return;\n    }\n\n    // If it's already the current view, do nothing\n    // if (this.state.currentView === viewType) return;\n\n    // Hide all views\n    this.components.views.forEach((v, type) => {\n      if (type !== viewType) {\n        v.style.display = 'none';\n        v.classList.remove('active');\n      }\n    });\n\n    // Show the selected view\n    view.style.display = 'flex';\n\n    // Trigger reflow to ensure transitions work\n    void view.offsetWidth;\n\n    // Add active class for transitions\n    view.classList.add('active');\n\n    // Update state\n    this.state.currentView = viewType;\n\n    // If showing attempt view, update attempt counter\n    if (viewType === 'attempt') {\n      const attemptCounter = document.getElementById('current-attempt');\n      if (attemptCounter) {\n        attemptCounter.textContent = this.state.currentAttempt.toString();\n      }\n    }\n\n    // Emit view changed event\n    this.emit('view-changed', viewType);\n  }\n\n  /**\n   * Transition to a view with animation\n   * @param viewType - Type of view to transition to\n   */\n  public transitionToView(viewType: ViewType): void {\n    if (this.state.isTransitioning) return;\n\n    this.state.isTransitioning = true;\n\n    // Get current and next view elements\n    const currentView = this.components.views.get(this.state.currentView);\n    const nextView = this.components.views.get(viewType);\n\n    if (!currentView || !nextView) {\n      console.error('Cannot transition: view not found');\n      this.state.isTransitioning = false;\n      return;\n    }\n\n    // Prepare next view\n    nextView.style.display = 'flex';\n    nextView.style.opacity = '0';\n    nextView.style.transform = 'translateY(20px)';\n\n    // Trigger reflow\n    void nextView.offsetWidth;\n\n    // Animate current view out\n    currentView.style.opacity = '0';\n    currentView.style.transform = 'translateY(-20px)';\n\n    // Animate next view in\n    nextView.style.opacity = '1';\n    nextView.style.transform = 'translateY(0)';\n\n    // After animation completes\n    setTimeout(() => {\n      // Hide current view\n      currentView.style.display = 'none';\n      currentView.classList.remove('active');\n\n      // Reset transforms\n      currentView.style.transform = '';\n      currentView.style.opacity = '';\n\n      // Mark next view as active\n      nextView.classList.add('active');\n\n      // Update state\n      this.state.currentView = viewType;\n      this.state.isTransitioning = false;\n\n      // If showing attempt view, update attempt counter\n      if (viewType === 'attempt') {\n        const attemptCounter = document.getElementById('current-attempt');\n        if (attemptCounter) {\n          attemptCounter.textContent = this.state.currentAttempt.toString();\n        }\n      }\n\n      // Emit view changed event\n      this.emit('view-changed', viewType);\n    }, 500); // Match the CSS transition duration\n  }\n\n  /**\n   * Set up attempt view for current attempt\n   * @param attemptNumber - Current attempt number (1-5)\n   * @param boxSize - Size of constraint box\n   */\n  public setupAttemptView(attemptNumber: number, boxSize: ConstraintBoxSize): void {\n    // Update state\n    this.state.currentAttempt = attemptNumber;\n\n    // Update constraint box size\n    this.config.constraintBoxSize = boxSize;\n    this.updateConstraintBoxSize();\n\n    // Update attempt counter\n    const attemptCounter = document.getElementById('current-attempt');\n    if (attemptCounter) {\n      attemptCounter.textContent = attemptNumber.toString();\n    }\n\n    // Update canvas dimensions\n    this.updateCanvasDimensions();\n  }\n\n  /**\n   * Show example drawing with animation\n   * @param drawing - Drawing data to display\n   */\n  public showExampleDrawing(drawing: DrawingData): void {\n    if (this.animation.exampleAnimationInProgress) return;\n    this.animation.exampleAnimationInProgress = true;\n\n    // Use constraint box as container for example\n    const box = this.components.constraintBox;\n    const history = this.components.historyDisplay;\n    if (!box || !history) {\n      this.animation.exampleAnimationInProgress = false;\n      return;\n    }\n\n    // Position and size constraint box as first-attempt dimensions\n    const baseBox = this.config.constraintBoxSize;\n    box.style.width = `${baseBox.width}px`;\n    box.style.height = `${baseBox.height}px`;\n    const drawingArea = box.parentElement;\n    if (drawingArea) {\n      const areaRect = drawingArea.getBoundingClientRect();\n      box.style.left = `${(areaRect.width - baseBox.width) / 2}px`;\n      box.style.top = `${(areaRect.height - baseBox.height) / 2}px`;\n    }\n\n    // Clear any existing content\n    box.innerHTML = '';\n\n    // Create canvas inside the constraint box\n    const canvas = document.createElement('canvas');\n    canvas.className = 'example-canvas';\n    canvas.style.position = 'absolute';\n    canvas.style.top = '0';\n    canvas.style.left = '0';\n    canvas.style.width = '100%';\n    canvas.style.height = '100%';\n    box.appendChild(canvas);\n\n    // Setup high-DPI dimensions\n    const rect = box.getBoundingClientRect();\n    const pixelRatio = this.config.pixelRatio;\n    canvas.width = rect.width * pixelRatio;\n    canvas.height = rect.height * pixelRatio;\n\n    const context = canvas.getContext('2d');\n    if (!context) {\n      this.animation.exampleAnimationInProgress = false;\n      return;\n    }\n    context.scale(pixelRatio, pixelRatio);\n\n    // Compute drawing bounds\n    let minX = Infinity,\n      maxX = -Infinity,\n      minY = Infinity,\n      maxY = -Infinity;\n    drawing.strokes.forEach(stroke => {\n      stroke.points.forEach(pt => {\n        minX = Math.min(minX, pt.x);\n        maxX = Math.max(maxX, pt.x);\n        minY = Math.min(minY, pt.y);\n        maxY = Math.max(maxY, pt.y);\n      });\n    });\n    const originalWidth = maxX - minX;\n    const originalHeight = maxY - minY;\n    if (originalWidth === 0 || originalHeight === 0) {\n      this.animation.exampleAnimationInProgress = false;\n      return;\n    }\n\n    // Determine scale & offset\n    const canvasW = rect.width;\n    const canvasH = rect.height;\n    const scale = Math.min((canvasW / originalWidth) * 0.8, (canvasH / originalHeight) * 0.8);\n    const offsetX = (canvasW - originalWidth * scale) / 2;\n    const offsetY = (canvasH - originalHeight * scale) / 2;\n\n    // Animate strokes sequentially\n    const animateStrokes = async () => {\n      for (const stroke of drawing.strokes) {\n        if (stroke.points.length < 2) continue;\n        context.beginPath();\n        context.strokeStyle = stroke.color;\n        context.lineWidth = 3;\n        context.lineCap = 'round';\n        context.lineJoin = 'round';\n        // Move to first point\n        const [first, ...rest] = stroke.points;\n        context.moveTo(offsetX + (first.x - minX) * scale, offsetY + (first.y - minY) * scale);\n        for (const pt of rest) {\n          context.lineTo(offsetX + (pt.x - minX) * scale, offsetY + (pt.y - minY) * scale);\n          context.stroke();\n          await new Promise(res => setTimeout(res, 20));\n        }\n        // Pause between strokes\n        await new Promise(res => setTimeout(res, 200));\n      }\n    };\n\n    // Run stroke animation then shrink into history\n    animateStrokes().then(() => {\n      canvas.classList.add('animate-to-corner');\n      // Center shrink so it stays fully inside the constraint box\n      canvas.style.transformOrigin = 'center center';\n      canvas.style.transform = 'scale(0.25)';\n      // After shrink animation, remove canvas and add thumbnail to history\n      setTimeout(() => {\n        // Remove the example canvas so it no longer sits in the constraint box\n        if (canvas.parentElement === box) {\n          box.removeChild(canvas);\n        }\n\n        const exampleItem = document.createElement('div');\n        exampleItem.className = 'history-item example-item';\n        const historyCanvas = document.createElement('canvas');\n        const histRect = history.getBoundingClientRect();\n        const thumbSize = histRect.height * 0.7;\n        this.renderDrawingToCanvas(drawing, historyCanvas, thumbSize, thumbSize, pixelRatio);\n        exampleItem.appendChild(historyCanvas);\n        const label = document.createElement('div');\n        label.className = 'history-label';\n        label.textContent = 'Example';\n        exampleItem.appendChild(label);\n        history.appendChild(exampleItem);\n        this.animation.exampleAnimationInProgress = false;\n        this.emit('example-animation-complete');\n      }, 1000);\n    });\n  }\n\n  /**\n   * Helper to render drawing data to a canvas at any size\n   */\n  private renderDrawingToCanvas(\n    drawing: DrawingData,\n    canvas: HTMLCanvasElement,\n    width: number,\n    height: number,\n    pixelRatio: number\n  ): void {\n    // Set canvas size in device pixels, style in CSS pixels\n    canvas.width = Math.round(width * pixelRatio);\n    canvas.height = Math.round(height * pixelRatio);\n    canvas.style.width = `${width}px`;\n    canvas.style.height = `${height}px`;\n    const ctx = canvas.getContext('2d');\n    if (!ctx) return;\n    ctx.setTransform(1, 0, 0, 1, 0, 0);\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n    ctx.scale(pixelRatio, pixelRatio);\n\n    // Find bounding box\n    let minX = Number.MAX_VALUE,\n      maxX = Number.MIN_VALUE,\n      minY = Number.MAX_VALUE,\n      maxY = Number.MIN_VALUE;\n    for (const stroke of drawing.strokes) {\n      for (const point of stroke.points) {\n        minX = Math.min(minX, point.x);\n        maxX = Math.max(maxX, point.x);\n        minY = Math.min(minY, point.y);\n        maxY = Math.max(maxY, point.y);\n      }\n    }\n    const originalWidth = maxX - minX;\n    const originalHeight = maxY - minY;\n    if (originalWidth === 0 || originalHeight === 0) return;\n    const scale = Math.min((width / originalWidth) * 0.8, (height / originalHeight) * 0.8);\n    const offsetX = (width - originalWidth * scale) / 2;\n    const offsetY = (height - originalHeight * scale) / 2;\n    for (const stroke of drawing.strokes) {\n      if (stroke.points.length < 2) continue;\n      ctx.beginPath();\n      ctx.strokeStyle = stroke.color;\n      ctx.lineWidth = 3;\n      ctx.lineCap = 'round';\n      ctx.lineJoin = 'round';\n      const firstPoint = stroke.points[0];\n      ctx.moveTo(offsetX + (firstPoint.x - minX) * scale, offsetY + (firstPoint.y - minY) * scale);\n      for (let i = 1; i < stroke.points.length; i++) {\n        const point = stroke.points[i];\n        ctx.lineTo(offsetX + (point.x - minX) * scale, offsetY + (point.y - minY) * scale);\n      }\n      ctx.stroke();\n    }\n  }\n\n  /**\n   * Animate drawing to history and shrink it\n   * @param attemptNumber - Attempt number\n   * @param drawing - Drawing data for the attempt\n   */\n  public animateDrawingToHistory(attemptNumber: number, drawing: DrawingData): void {\n    if (this.animation.attemptAnimationInProgress) return;\n    this.animation.attemptAnimationInProgress = true;\n\n    if (!this.components.drawingCanvas) {\n      this.animation.attemptAnimationInProgress = false;\n      return;\n    }\n\n    // Create a clone of the canvas (CSS pixel size, device pixel backing)\n    const originalCanvas = this.components.drawingCanvas;\n    const containerRect = originalCanvas.getBoundingClientRect();\n    const dpr = this.config.pixelRatio;\n    const tempCanvas = document.createElement('canvas');\n    tempCanvas.width = Math.round(containerRect.width * dpr);\n    tempCanvas.height = Math.round(containerRect.height * dpr);\n    tempCanvas.style.width = `${containerRect.width}px`;\n    tempCanvas.style.height = `${containerRect.height}px`;\n    tempCanvas.style.position = 'absolute';\n    tempCanvas.style.top = '0';\n    tempCanvas.style.left = '0';\n    tempCanvas.style.zIndex = '10';\n\n    // Copy content\n    const tempContext = tempCanvas.getContext('2d');\n    if (!tempContext) {\n      this.animation.attemptAnimationInProgress = false;\n      return;\n    }\n    tempContext.setTransform(1, 0, 0, 1, 0, 0);\n    tempContext.drawImage(originalCanvas, 0, 0, tempCanvas.width, tempCanvas.height);\n\n    // Get drawing area\n    const drawingArea = originalCanvas.parentElement;\n    if (!drawingArea) {\n      this.animation.attemptAnimationInProgress = false;\n      return;\n    }\n    drawingArea.appendChild(tempCanvas);\n\n    setTimeout(() => {\n      tempCanvas.classList.add('animate-to-history');\n\n      // All rects in CSS pixels\n      const historyRect = this.components.historyDisplay!.getBoundingClientRect();\n      const drawingRect = drawingArea.getBoundingClientRect();\n      const itemIndex = this.historyItems.length;\n      const gap = 10; // px\n      const thumbSize = historyRect.height * 0.7;\n      const xInHistory = itemIndex * (thumbSize + gap);\n\n      // Calculate scale and translation in CSS pixels\n      const scale = thumbSize / drawingRect.width;\n      const offsetX =\n        historyRect.left -\n        drawingRect.left +\n        xInHistory +\n        (thumbSize - drawingRect.width * scale) / 2;\n      const offsetY =\n        historyRect.top - drawingRect.top + (historyRect.height - drawingRect.height * scale) / 2;\n\n      tempCanvas.style.transition = 'transform 0.8s ease-in-out';\n      tempCanvas.style.transformOrigin = 'top left';\n      tempCanvas.style.transform = `translate(${offsetX}px, ${offsetY}px) scale(${scale})`;\n\n      setTimeout(() => {\n        // Create history item\n        const historyItem = document.createElement('div');\n        historyItem.className = 'history-item attempt-item';\n        // Create thumbnail canvas (device pixel backing, CSS pixel style)\n        const historyCanvas = document.createElement('canvas');\n        this.renderDrawingToCanvas(drawing, historyCanvas, thumbSize, thumbSize, dpr);\n        historyItem.appendChild(historyCanvas);\n        // Add label\n        const label = document.createElement('div');\n        label.className = 'history-label';\n        label.textContent = `Attempt ${attemptNumber}`;\n        historyItem.appendChild(label);\n        if (this.components.historyDisplay) {\n          this.components.historyDisplay.appendChild(historyItem);\n          this.historyItems.push(historyItem);\n        }\n        drawingArea.removeChild(tempCanvas);\n        // Clear original canvas\n        const originalContext = originalCanvas.getContext('2d');\n        if (originalContext) {\n          originalContext.clearRect(0, 0, originalCanvas.width, originalCanvas.height);\n        }\n        this.animation.attemptAnimationInProgress = false;\n        this.emit('attempt-animation-complete', attemptNumber);\n      }, 1000);\n    }, 100);\n  }\n\n  /**\n   * Display score results\n   * @param score - Score result to display\n   */\n  public showScoreScreen(score: ScoreResult): void {\n    // Switch to score view\n    this.showView('score');\n\n    // Update score display elements\n    const scoreView = this.components.views.get('score');\n    if (!scoreView) return;\n\n    // Update total score\n    const scoreNumber = scoreView.querySelector('.score-number');\n    if (scoreNumber) {\n      scoreNumber.textContent = score.totalScore.toString();\n    }\n\n    // Update feedback message\n    const feedbackMessage = scoreView.querySelector('.feedback-message');\n    if (feedbackMessage) {\n      feedbackMessage.textContent = score.feedback;\n    }\n\n    // Clear existing stars\n    const starContainers = scoreView.querySelectorAll('.stars');\n    starContainers.forEach(container => {\n      container.innerHTML = '';\n    });\n\n    // Animate stars with a delay between categories\n    setTimeout(() => {\n      this.displayStars('.accuracy-stars', score.categories.accuracy);\n\n      setTimeout(() => {\n        this.displayStars('.strokes-stars', score.categories.strokes);\n\n        setTimeout(() => {\n          this.displayStars('.timing-stars', score.categories.timing);\n\n          setTimeout(() => {\n            this.displayStars('.overall-stars', score.categories.overall);\n          }, 300);\n        }, 300);\n      }, 300);\n    }, 500);\n  }\n  /**\n   * Handle exercise selection from the list\n   * @param exercise - Selected exercise\n   */\n  private handleExerciseSelection(exercise: Exercise): void {\n    // Emit event for exercise selection\n    this.emit('exercise-selected', exercise);\n  }\n\n  /**\n   * Clean up any ongoing animations\n   */\n  public cleanupAnimations(): void {\n    // Reset animation flags\n    this.animation.exampleAnimationInProgress = false;\n    this.animation.attemptAnimationInProgress = false;\n    this.animation.scoreAnimationInProgress = false;\n\n    // Remove any temporary animation elements\n    if (this.components.container) {\n      const tempElements = this.components.container.querySelectorAll(\n        '.animate-to-corner, .animate-to-history'\n      );\n      tempElements.forEach(element => {\n        if (element.parentElement) {\n          element.parentElement.removeChild(element);\n        }\n      });\n    }\n  }\n\n  /**\n   * Reset the history display\n   */\n  public resetHistoryDisplay(): void {\n    if (!this.components.historyDisplay) return;\n\n    // Clear the history display\n    this.components.historyDisplay.innerHTML = '';\n\n    // Reset history items array\n    this.historyItems = [];\n  }\n\n  /**\n   * Update the attempt counter\n   * @param attemptNumber - Current attempt number\n   */\n  public updateAttemptCounter(attemptNumber: number): void {\n    // Update state\n    this.state.currentAttempt = attemptNumber;\n\n    // Update DOM element\n    const attemptCounter = document.getElementById('current-attempt');\n    if (attemptCounter) {\n      attemptCounter.textContent = attemptNumber.toString();\n    }\n  }\n\n  /**\n   * Display a confirmation message when exercise is saved\n   */\n  public showExerciseSavedConfirmation(): void {\n    if (!this.components.container) return;\n\n    // Create confirmation overlay\n    const confirmationOverlay = document.createElement('div');\n    confirmationOverlay.className = 'confirmation-overlay';\n    confirmationOverlay.innerHTML = `\n      <div class=\"confirmation-content\">\n        <div class=\"confirmation-icon\">✓</div>\n        <div class=\"confirmation-message\">Exercise Saved!</div>\n      </div>\n    `;\n\n    // Add to container\n    this.components.container.appendChild(confirmationOverlay);\n\n    // Force reflow for animation\n    void confirmationOverlay.offsetWidth;\n\n    // Show with fade in\n    confirmationOverlay.style.opacity = '1';\n\n    // Remove after animation\n    setTimeout(() => {\n      confirmationOverlay.style.opacity = '0';\n\n      setTimeout(() => {\n        if (confirmationOverlay.parentElement) {\n          confirmationOverlay.parentElement.removeChild(confirmationOverlay);\n        }\n      }, 300);\n    }, 1500);\n  }\n\n  /**\n   * Display stars for a category with animation\n   * @param selector - CSS selector for star container\n   * @param starCount - Number of stars (1-5)\n   */\n  private displayStars(selector: string, starCount: number): void {\n    const container = document.querySelector(selector) as HTMLElement;\n    if (!container) return;\n\n    // Clamp star count to valid range\n    const validStarCount = Math.max(1, Math.min(5, starCount));\n\n    // Create stars\n    for (let i = 0; i < 5; i++) {\n      const star = document.createElement('div');\n      star.className = i < validStarCount ? 'star star-filled' : 'star star-empty';\n\n      // Add with delay for animation\n      setTimeout(() => {\n        container.appendChild(star);\n\n        // Trigger animation after a small delay\n        setTimeout(() => {\n          star.classList.add('star-animated');\n\n          // Emit event for audio feedback\n          if (i < validStarCount) {\n            this.emit('star-added', i + 1);\n          }\n        }, 50);\n      }, i * 150);\n    }\n  }\n\n  /**\n   * Calculate constraint box size based on attempt number\n   * @param attemptNumber - Current attempt number (1-5)\n   * @returns Constraint box size\n   */\n  private calculateConstraintBoxSize(attemptNumber: number): ConstraintBoxSize {\n    // Base size from configuration\n    const baseSize = this.config.constraintBoxSize;\n\n    // Reduce size with each attempt\n    // Start with 100% of base size and reduce by 15% for each attempt\n    const scaleFactor = Math.max(0.4, 1 - (attemptNumber - 1) * 0.15);\n\n    return {\n      width: baseSize.width * scaleFactor,\n      height: baseSize.height * scaleFactor,\n    };\n  }\n\n  /**\n   * Set loading state\n   * @param message - Optional loading message\n   */\n  public setLoading(message: string = 'Loading...'): void {\n    if (!this.components.container) return;\n\n    // Don't add multiple loading overlays\n    this.clearLoading();\n\n    // Update state\n    this.state.isLoading = true;\n\n    // Create loading overlay\n    const loadingOverlay = document.createElement('div');\n    loadingOverlay.className = 'loading-overlay';\n    loadingOverlay.innerHTML = `\n      <div class=\"loading-spinner\"></div>\n      <div class=\"loading-message\">${message}</div>\n    `;\n\n    // Add to container\n    this.components.container.appendChild(loadingOverlay);\n\n    // Force reflow for animation\n    void loadingOverlay.offsetWidth;\n\n    // Show with fade in\n    (loadingOverlay as HTMLElement).style.opacity = '1';\n  }\n\n  /**\n   * Clear loading state\n   */\n  public clearLoading(): void {\n    if (!this.components.container) return;\n\n    // Update state\n    this.state.isLoading = false;\n\n    // Find existing loading overlay\n    const loadingOverlay = this.components.container.querySelector('.loading-overlay');\n    if (!loadingOverlay) return;\n\n    // Fade out\n    (loadingOverlay as HTMLElement).style.opacity = '0';\n\n    // Remove after animation\n    setTimeout(() => {\n      if (loadingOverlay.parentElement) {\n        loadingOverlay.parentElement.removeChild(loadingOverlay);\n      }\n    }, 300);\n  }\n\n  /**\n   * Show error message\n   * @param message - Error message\n   */\n  public showError(message: string): void {\n    if (!this.components.container) return;\n\n    // Update state\n    this.state.hasError = true;\n    this.state.errorMessage = message;\n\n    // Create error overlay if it doesn't exist\n    let errorOverlay = this.components.container.querySelector('.error-overlay');\n\n    if (!errorOverlay) {\n      errorOverlay = document.createElement('div');\n      errorOverlay.className = 'error-overlay';\n\n      // Create error content\n      errorOverlay.innerHTML = `\n        <div class=\"error-content\">\n          <div class=\"error-icon\">⚠️</div>\n          <div class=\"error-message\">${message}</div>\n          <button class=\"btn btn-primary error-button\">OK</button>\n        </div>\n      `;\n\n      // Add event listener for OK button\n      const okButton = errorOverlay.querySelector('.error-button');\n      if (okButton) {\n        okButton.addEventListener('click', () => {\n          this.clearError();\n        });\n      }\n\n      // Add to container\n      this.components.container.appendChild(errorOverlay);\n\n      // Force reflow for animation\n      void (errorOverlay as HTMLElement).offsetWidth;\n\n      // Show with fade in\n      (errorOverlay as HTMLElement).style.opacity = '1';\n    } else {\n      // Update existing error message\n      const errorMessage = errorOverlay.querySelector('.error-message');\n      if (errorMessage) {\n        errorMessage.textContent = message;\n      }\n    }\n\n    // Emit error event\n    this.emit('error-shown', message);\n  }\n\n  /**\n   * Clear error message\n   */\n  public clearError(): void {\n    if (!this.components.container) return;\n\n    // Update state\n    this.state.hasError = false;\n    this.state.errorMessage = '';\n\n    // Find existing error overlay\n    const errorOverlay = this.components.container.querySelector('.error-overlay');\n    if (!errorOverlay) return;\n\n    // Fade out\n    (errorOverlay as HTMLElement).style.opacity = '0';\n\n    // Remove after animation\n    setTimeout(() => {\n      if (errorOverlay.parentElement) {\n        errorOverlay.parentElement.removeChild(errorOverlay);\n      }\n    }, 300);\n\n    // Emit error cleared event\n    this.emit('error-cleared');\n  }\n\n  /**\n   * Update exercise list\n   * @param exercises - Available exercises\n   * @param thumbnails - Map of exercise ID to thumbnail URL\n   */\n  public updateExerciseList(\n    exercises: Exercise[],\n    thumbnails: { [exerciseId: string]: string }\n  ): void {\n    console.log(`UIManager: updateExerciseList with ${exercises.length} templates`);\n    // Get the exercise list container\n    const exerciseListView = this.components.views.get('exercise-list');\n    if (!exerciseListView) return;\n\n    const exerciseList = exerciseListView.querySelector('.exercise-list');\n    if (!exerciseList) return;\n\n    // Clear existing items\n    exerciseList.innerHTML = '';\n\n    if (exercises.length === 0) {\n      // Show no exercises message\n      const noExercises = document.createElement('div');\n      noExercises.className = 'no-exercises-message';\n      noExercises.textContent = 'No templates found. Create a new template first.';\n      exerciseList.appendChild(noExercises);\n      return;\n    }\n\n    // Create exercise items\n    exercises.forEach(exercise => {\n      const exerciseItem = document.createElement('div');\n      exerciseItem.className = 'exercise-item';\n      exerciseItem.dataset.id = exercise.id;\n\n      // Create thumbnail container\n      const thumbnailContainer = document.createElement('div');\n      thumbnailContainer.className = 'exercise-thumbnail';\n\n      // Add thumbnail if available\n      if (thumbnails[exercise.id]) {\n        const img = document.createElement('img');\n        img.src = thumbnails[exercise.id];\n        img.alt = exercise.name;\n        thumbnailContainer.appendChild(img);\n      } else {\n        // Default placeholder\n        thumbnailContainer.innerHTML = '<div class=\"thumbnail-placeholder\">?</div>';\n      }\n\n      // Create exercise details\n      const details = document.createElement('div');\n      details.className = 'exercise-details';\n\n      // Exercise name\n      const name = document.createElement('div');\n      name.className = 'exercise-name';\n      name.textContent = exercise.name;\n      details.appendChild(name);\n\n      // Exercise date\n      const date = document.createElement('div');\n      date.className = 'exercise-date';\n      date.textContent = exercise.createdAt.toLocaleDateString();\n      details.appendChild(date);\n\n      // High score if available\n      if (exercise.highestScore) {\n        const score = document.createElement('div');\n        score.className = 'exercise-score';\n\n        // Create star container\n        const stars = document.createElement('div');\n        stars.className = 'exercise-stars';\n\n        // Add stars based on overall rating\n        const starCount = exercise.highestScore.categories.overall;\n        for (let i = 0; i < 5; i++) {\n          const star = document.createElement('span');\n          star.className = i < starCount ? 'star-mini star-filled' : 'star-mini star-empty';\n          stars.appendChild(star);\n        }\n\n        score.appendChild(stars);\n        details.appendChild(score);\n      }\n\n      // Assemble exercise item\n      exerciseItem.appendChild(thumbnailContainer);\n      exerciseItem.appendChild(details);\n\n      // Add click handler\n      exerciseItem.addEventListener('click', () => {\n        this.handleExerciseSelection(exercise);\n      });\n\n      // Add to list\n      exerciseList.appendChild(exerciseItem);\n    });\n  }\n}\n","/**\n * Handwriting Exercise Game\n * Main entry point for the application\n */\n\nimport { GameManager } from './core/GameManager';\nimport { DrawingManager } from './core/DrawingManager';\nimport { ScoreManager } from './core/ScoreManager';\nimport { StorageManager } from './services/StorageManager';\nimport { AudioManager } from './services/AudioManager';\nimport { UIManager } from './services/UIManager';\n\n/**\n * Initialize the application\n */\nasync function init(): Promise<void> {\n  console.log('Initializing handwriting exercise game...');\n\n  try {\n    // Show loading screen\n    showLoadingScreen();\n\n    // Get container element\n    const gameContainer = document.getElementById('game-container');\n    if (!gameContainer) {\n      throw new Error('Game container element not found');\n    }\n\n    // Initialize managers\n    const storageManager = new StorageManager();\n    const audioManager = new AudioManager();\n    const drawingManager = new DrawingManager();\n    const scoreManager = new ScoreManager();\n    const uiManager = new UIManager();\n\n    // Initialize storage first to load any saved data\n    await storageManager.initialize();\n    console.log('Storage manager initialized');\n\n    // Initialize UI\n    uiManager.initialize(gameContainer);\n    console.log('UI manager initialized');\n\n    // Initialize drawing\n    drawingManager.initialize();\n    console.log('Drawing manager initialized');\n\n    // Initialize scoring\n    scoreManager.initialize();\n    console.log('Score manager initialized');\n\n    // Setup tablet-specific behaviors\n    setupTabletBehavior();\n\n    // Instantiate GameManager and wire up all game flows through a single coordinator\n    const gameManager = new GameManager({\n      storageManager,\n      audioManager,\n      uiManager,\n      drawingManager,\n      scoreManager,\n      container: gameContainer,\n    });\n    await gameManager.initialize();\n    console.log('Game manager initialized');\n\n    // Hide loading screen and show welcome view (UIManager does this by default)\n    hideLoadingScreen();\n    console.log('Main: init complete, explicitly showing welcome view');\n    uiManager.showView('welcome');\n    console.log('Main: welcome view should now be visible and on top');\n  } catch (error) {\n    console.error('Failed to initialize application:', error);\n    showErrorScreen(error);\n  }\n}\n\n/**\n * Show loading screen\n */\nfunction showLoadingScreen(): void {\n  console.log('Main: showLoadingScreen');\n  const loadingScreen = document.getElementById('loading-screen');\n  if (loadingScreen) {\n    loadingScreen.style.display = 'flex';\n    loadingScreen.style.opacity = '1';\n  }\n}\n\n/**\n * Hide loading screen with fade-out animation\n */\nfunction hideLoadingScreen(): void {\n  console.log('Main: hideLoadingScreen');\n  const loadingScreen = document.getElementById('loading-screen');\n  if (loadingScreen) {\n    loadingScreen.classList.add('fade-out');\n\n    // Remove after animation\n    setTimeout(() => {\n      loadingScreen.style.display = 'none';\n      console.log('Main: loading screen hidden, welcome view should be visible');\n    }, 500);\n  }\n}\n\n/**\n * Set up tablet-specific behaviors\n */\nfunction setupTabletBehavior(): void {\n  // Prevent default touch behaviors on canvas\n  document.addEventListener(\n    'touchstart',\n    event => {\n      if (event.target instanceof HTMLCanvasElement) {\n        event.preventDefault();\n      }\n    },\n    { passive: false }\n  );\n\n  // Prevent scrolling when touching the canvas\n  document.addEventListener(\n    'touchmove',\n    event => {\n      if (event.target instanceof HTMLCanvasElement) {\n        event.preventDefault();\n      }\n    },\n    { passive: false }\n  );\n\n  // Prevent context menu on long-press\n  document.addEventListener('contextmenu', event => {\n    event.preventDefault();\n    return false;\n  });\n\n  // Handle visibility changes (app going to background)\n  document.addEventListener('visibilitychange', () => {\n    if (document.hidden) {\n      // Pause game or mute audio when app goes to background\n      console.log('App went to background');\n    } else {\n      // Resume game when app comes back to foreground\n      console.log('App came to foreground');\n    }\n  });\n}\n\n/**\n * Show error screen when initialization fails\n */\nfunction showErrorScreen(error: unknown): void {\n  const errorMessage = error instanceof Error ? error.message : 'Unknown error occurred';\n\n  const container = document.getElementById('app');\n  if (!container) return;\n\n  // Hide loading screen\n  const loadingScreen = document.getElementById('loading-screen');\n  if (loadingScreen) {\n    loadingScreen.style.display = 'none';\n  }\n\n  // Create error screen\n  const errorScreen = document.createElement('div');\n  errorScreen.className = 'error-screen';\n  errorScreen.innerHTML = `\n    <div class=\"error-content\">\n      <h2>Oops! Something went wrong</h2>\n      <p>${errorMessage}</p>\n      <button class=\"btn btn-primary\" onclick=\"location.reload()\">Try Again</button>\n    </div>\n  `;\n\n  container.appendChild(errorScreen);\n}\n\n// Initialize when DOM is fully loaded\ndocument.addEventListener('DOMContentLoaded', init);\n"],"names":["UIManager","EventEmitter","state","currentView","currentAttempt","isTransitioning","isLoading","hasError","errorMessage","config","isMobile","isLandscape","viewportWidth","viewportHeight","pixelRatio","historyHeight","constraintBoxSize","width","height","animation","exampleAnimationInProgress","attemptAnimationInProgress","scoreAnimationInProgress","components","container","views","Map","drawingCanvas","constraintBox","historyDisplay","buttons","historyItems","initialize","console","log","this","createViewElements","Array","from","keys","setupEventListeners","updateConfiguration","showView","listView","get","style","display","classList","remove","emit","innerHTML","createWelcomeView","createAttemptView","createCreateExerciseView","createScoreView","createExerciseListView","forEach","view","appendChild","document","createElement","className","set","createButton","querySelector","loadButton","addEventListener","doneButton","cancelButton","saveButton","nameInput","name","value","trim","tryAgainButton","menuButton","backButton","window","handleResize","bind","handleOrientationChange","updateLayout","setTimeout","innerWidth","innerHeight","devicePixelRatio","baseSize","Math","min","updateCanvasDimensions","updateConstraintBoxSize","updateHistoryDisplay","canvas","parentElement","rect","getBoundingClientRect","dpr","round","ctx","getContext","setTransform","scale","box","size","calculateConstraintBoxSize","drawingArea","areaRect","left","top","viewType","v","type","offsetWidth","add","attemptCounter","getElementById","textContent","toString","error","transitionToView","nextView","opacity","transform","setupAttemptView","attemptNumber","boxSize","showExampleDrawing","drawing","history","baseBox","position","context","minX","Infinity","maxX","minY","maxY","strokes","stroke","points","pt","x","max","y","originalWidth","originalHeight","canvasW","canvasH","offsetX","offsetY","async","length","beginPath","strokeStyle","color","lineWidth","lineCap","lineJoin","first","rest","moveTo","lineTo","Promise","res","animateStrokes","then","transformOrigin","removeChild","exampleItem","historyCanvas","thumbSize","renderDrawingToCanvas","label","clearRect","Number","MAX_VALUE","MIN_VALUE","point","firstPoint","i","animateDrawingToHistory","originalCanvas","containerRect","tempCanvas","zIndex","tempContext","drawImage","historyRect","drawingRect","itemIndex","xInHistory","transition","historyItem","push","originalContext","showScoreScreen","score","scoreView","scoreNumber","totalScore","feedbackMessage","feedback","querySelectorAll","displayStars","categories","accuracy","timing","overall","handleExerciseSelection","exercise","cleanupAnimations","element","resetHistoryDisplay","updateAttemptCounter","showExerciseSavedConfirmation","confirmationOverlay","selector","starCount","validStarCount","star","scaleFactor","setLoading","message","clearLoading","loadingOverlay","showError","errorOverlay","okButton","clearError","updateExerciseList","exercises","thumbnails","exerciseListView","exerciseList","noExercises","exerciseItem","dataset","id","thumbnailContainer","img","src","alt","details","date","createdAt","toLocaleDateString","highestScore","stars","loadingScreen","showLoadingScreen","gameContainer","Error","storageManager","StorageManager","audioManager","AudioManager","drawingManager","DrawingManager","scoreManager","ScoreManager","uiManager","event","target","HTMLCanvasElement","preventDefault","passive","hidden","gameManager","GameManager","hideLoadingScreen","errorScreen","showErrorScreen"],"mappings":"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"}